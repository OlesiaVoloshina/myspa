{"ast":null,"code":"(function (global, factory) {\n  typeof exports === \"object\" && typeof module !== \"undefined\" ? factory(exports, require(\"reflect-metadata\"), require(\"inversify\"), require(\"emittery\"), require(\"xmldom\")) : typeof define === \"function\" && define.amd ? define([\"exports\", \"reflect-metadata\", \"inversify\", \"emittery\", \"xmldom\"], factory) : (global = typeof globalThis !== \"undefined\" ? globalThis : global || self, factory(global.BloomreachSpaSdk = {}, null, global.inversify, global.emittery, global.xmldom));\n})(this, function (exports, reflectMetadata, inversify, emittery, xmldom) {\n  \"use strict\";\n\n  function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n\n      return target;\n    };\n\n    return _extends.apply(this, arguments);\n  }\n\n  function __rest(s, e) {\n    var t = {};\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n  }\n\n  function __decorate(decorators, target, key, desc) {\n    var c = arguments.length,\n        r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n        d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  }\n\n  function __param(paramIndex, decorator) {\n    return function (target, key) {\n      decorator(target, key, paramIndex);\n    };\n  }\n\n  function __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n  }\n\n  function __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P ? value : new P(function (resolve) {\n        resolve(value);\n      });\n    }\n\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n\n      function step(result) {\n        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n      }\n\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  }\n\n  function appendSearchParams(url, params) {\n    const {\n      hash,\n      origin,\n      pathname,\n      searchParams\n    } = parseUrl(url);\n    return buildUrl({\n      hash,\n      origin,\n      pathname,\n      searchParams: mergeSearchParams(searchParams, params)\n    });\n  }\n\n  function buildUrl(url) {\n    var _a, _b, _c, _d, _e, _f, _g;\n\n    const searchParams = (_b = (_a = url.searchParams) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : \"\";\n    const search = (_c = url.search) !== null && _c !== void 0 ? _c : `${searchParams && `?${searchParams}`}`;\n    const path = (_d = url.path) !== null && _d !== void 0 ? _d : `${(_e = url.pathname) !== null && _e !== void 0 ? _e : \"\"}${search}${(_f = url.hash) !== null && _f !== void 0 ? _f : \"\"}`;\n    return `${(_g = url.origin) !== null && _g !== void 0 ? _g : \"\"}${path}`;\n  }\n\n  function extractSearchParams(url, params) {\n    const {\n      hash,\n      origin,\n      pathname,\n      searchParams\n    } = parseUrl(url);\n    const extracted = new URLSearchParams();\n    params.forEach(param => {\n      if (searchParams.has(param)) {\n        extracted.set(param, searchParams.get(param));\n        searchParams.delete(param);\n      }\n    });\n    return {\n      searchParams: extracted,\n      url: buildUrl({\n        hash,\n        origin,\n        pathname,\n        searchParams\n      })\n    };\n  }\n\n  function isAbsoluteUrl(url) {\n    const {\n      origin,\n      pathname\n    } = parseUrl(url);\n    return !!origin || pathname.startsWith(\"/\");\n  }\n\n  function isMatchedOrigin(origin, baseOrigin) {\n    const [schema, host = \"\"] = origin.split(\"//\", 2);\n    const [baseSchema, baseHost = \"\"] = baseOrigin.split(\"//\", 2);\n    return !baseOrigin || !origin || (!schema || !baseSchema || schema === baseSchema) && baseHost === host;\n  }\n\n  function isMatchedPathname(pathname, basePathname) {\n    return !basePathname || pathname.startsWith(basePathname);\n  }\n\n  function isMatchedQuery(search, baseSearch) {\n    let match = true;\n    baseSearch.forEach((value, key) => {\n      match = match && (!value && search.has(key) || search.getAll(key).includes(value));\n    });\n    return match;\n  }\n\n  function isMatched(link, base = \"\") {\n    const linkUrl = parseUrl(link);\n    const baseUrl = parseUrl(base);\n    return isMatchedOrigin(linkUrl.origin, baseUrl.origin) && isMatchedPathname(linkUrl.pathname, baseUrl.pathname) && isMatchedQuery(linkUrl.searchParams, baseUrl.searchParams);\n  }\n\n  function mergeSearchParams(params, ...rest) {\n    const result = new URLSearchParams(params);\n    rest.forEach(params => params.forEach((value, key) => result.set(key, value)));\n    return result;\n  }\n\n  function parseUrl(url) {\n    const parsedUrl = url ? new URL(url, \"http://example.com\") : {};\n    const {\n      hash = \"\",\n      search = \"\",\n      searchParams = new URLSearchParams()\n    } = parsedUrl;\n    let origin = url.substring(0, url.length - search.length - hash.length);\n    let {\n      pathname = \"\"\n    } = parsedUrl;\n\n    if (!origin.endsWith(pathname)) {\n      pathname = pathname.substring(1);\n    }\n\n    origin = origin.substring(0, origin.length - pathname.length);\n    return {\n      hash,\n      origin,\n      pathname,\n      search,\n      searchParams,\n      path: `${pathname}${search}${hash}`\n    };\n  }\n\n  function resolveUrl(url, base) {\n    const baseUrl = parseUrl(base);\n    const sourceUrl = parseUrl(url);\n    const pathname = sourceUrl.pathname.startsWith(\"/\") ? sourceUrl.pathname : `${baseUrl.pathname}${baseUrl.pathname.endsWith(\"/\") || !sourceUrl.pathname ? \"\" : \"/\"}${sourceUrl.pathname}`;\n    return buildUrl({\n      pathname,\n      hash: sourceUrl.hash || baseUrl.hash,\n      origin: sourceUrl.origin || baseUrl.origin,\n      searchParams: mergeSearchParams(baseUrl.searchParams, sourceUrl.searchParams)\n    });\n  }\n\n  const UrlBuilderOptionsToken = Symbol.for(\"UrlBuilderOptionsToken\");\n  const UrlBuilderService = Symbol.for(\"UrlBuilderService\");\n  let UrlBuilderImpl = class UrlBuilderImpl {\n    constructor(options) {\n      var _a, _b;\n\n      this.endpoint = parseUrl((_a = options.endpoint) !== null && _a !== void 0 ? _a : \"\");\n      this.baseUrl = parseUrl((_b = options.baseUrl) !== null && _b !== void 0 ? _b : \"\");\n    }\n\n    getApiUrl(link) {\n      const {\n        pathname,\n        searchParams\n      } = parseUrl(link);\n\n      if (this.baseUrl.pathname && !pathname.startsWith(this.baseUrl.pathname)) {\n        throw new Error(`The path \"${pathname}\" does not start with the base path \"${this.baseUrl.pathname}\".`);\n      }\n\n      const route = pathname.substring(this.baseUrl.pathname.length);\n      return buildUrl({\n        origin: this.endpoint.origin,\n        pathname: `${this.endpoint.pathname}${route}`,\n        searchParams: mergeSearchParams(searchParams, this.endpoint.searchParams)\n      });\n    }\n\n    getSpaUrl(link) {\n      const {\n        hash,\n        pathname,\n        searchParams\n      } = parseUrl(link);\n      const route = !pathname.startsWith(\"/\") && !this.baseUrl.pathname ? `/${pathname}` : pathname;\n      return buildUrl({\n        origin: this.baseUrl.origin,\n        pathname: `${this.baseUrl.pathname}${route}`,\n        searchParams: mergeSearchParams(searchParams, this.baseUrl.searchParams),\n        hash: hash || this.baseUrl.hash\n      });\n    }\n\n  };\n  UrlBuilderImpl = __decorate([inversify.injectable(), __param(0, inversify.inject(UrlBuilderOptionsToken)), __metadata(\"design:paramtypes\", [Object])], UrlBuilderImpl);\n\n  function UrlModule() {\n    return new inversify.ContainerModule(bind => {\n      bind(UrlBuilderService).to(UrlBuilderImpl).inSingletonScope();\n    });\n  }\n\n  const DEFAULT_API_BASE_URL = \"/resourceapi\";\n  const DEFAULT_SPA_BASE_URL = \"\";\n  let UrlBuilderImpl$1 = class UrlBuilderImpl {\n    constructor(options) {\n      var _a, _b, _c, _d;\n\n      this.apiBaseUrl = parseUrl((_a = options.apiBaseUrl) !== null && _a !== void 0 ? _a : `${(_b = options.cmsBaseUrl) !== null && _b !== void 0 ? _b : \"\"}${DEFAULT_API_BASE_URL}`);\n      this.cmsBaseUrl = parseUrl((_c = options.cmsBaseUrl) !== null && _c !== void 0 ? _c : \"\");\n      this.spaBaseUrl = parseUrl((_d = options.spaBaseUrl) !== null && _d !== void 0 ? _d : DEFAULT_SPA_BASE_URL);\n    }\n\n    getApiUrl(link) {\n      const {\n        pathname,\n        searchParams\n      } = parseUrl(link);\n\n      if (this.apiBaseUrl.pathname && pathname.startsWith(this.apiBaseUrl.pathname)) {\n        return buildUrl({\n          pathname,\n          origin: this.apiBaseUrl.origin,\n          searchParams: mergeSearchParams(this.apiBaseUrl.searchParams, searchParams)\n        });\n      }\n\n      if (this.spaBaseUrl.pathname && !pathname.startsWith(this.spaBaseUrl.pathname)) {\n        throw new Error(`The path \"${pathname}\" does not start with the base path \"${this.spaBaseUrl.pathname}\".`);\n      }\n\n      const route = pathname.substring(this.spaBaseUrl.pathname.length);\n      return buildUrl({\n        origin: this.apiBaseUrl.origin,\n        pathname: `${this.apiBaseUrl.pathname}${route}`,\n        searchParams: mergeSearchParams(searchParams, this.apiBaseUrl.searchParams)\n      });\n    }\n\n    getSpaUrl(link) {\n      const {\n        hash,\n        pathname,\n        searchParams\n      } = parseUrl(link);\n      let route = pathname.startsWith(this.cmsBaseUrl.pathname) ? pathname.substring(this.cmsBaseUrl.pathname.length) : pathname;\n\n      if (!route.startsWith(\"/\") && !this.spaBaseUrl.pathname) {\n        route = `/${route}`;\n      }\n\n      return buildUrl({\n        origin: this.spaBaseUrl.origin,\n        pathname: `${this.spaBaseUrl.pathname}${route}`,\n        searchParams: mergeSearchParams(searchParams, this.spaBaseUrl.searchParams),\n        hash: hash || this.spaBaseUrl.hash\n      });\n    }\n\n  };\n  UrlBuilderImpl$1 = __decorate([inversify.injectable(), __param(0, inversify.inject(UrlBuilderOptionsToken)), __metadata(\"design:paramtypes\", [Object])], UrlBuilderImpl$1);\n\n  function UrlModule$1() {\n    return new inversify.ContainerModule(bind => {\n      bind(UrlBuilderService).to(UrlBuilderImpl$1).inSingletonScope();\n    });\n  }\n\n  var ApiImpl_1;\n  const DEFAULT_API_VERSION_HEADER = \"Accept-Version\";\n  const DEFAULT_AUTHORIZATION_HEADER = \"Authorization\";\n  const DEFAULT_SERVER_ID_HEADER = \"Server-Id\";\n  const ApiOptionsToken = Symbol.for(\"ApiOptionsToken\");\n  const ApiService = Symbol.for(\"ApiService\");\n  let ApiImpl = ApiImpl_1 = class ApiImpl {\n    constructor(urlBuilder, options) {\n      this.urlBuilder = urlBuilder;\n      this.headers = ApiImpl_1.getHeaders(options);\n      this.httpClient = options.httpClient;\n    }\n\n    static getHeaders(options) {\n      const {\n        remoteAddress: ip\n      } = options.request.connection || {};\n\n      const _a = options.request.headers || {},\n            headers = __rest(_a, [\"host\"]);\n\n      const {\n        apiVersionHeader = DEFAULT_API_VERSION_HEADER,\n        apiVersion,\n        authorizationHeader = DEFAULT_AUTHORIZATION_HEADER,\n        authorizationToken,\n        serverIdHeader = DEFAULT_SERVER_ID_HEADER,\n        serverId,\n        visitor\n      } = options;\n      return _extends(_extends(_extends(_extends(_extends(_extends({}, ip && {\n        \"x-forwarded-for\": ip\n      }), apiVersion && {\n        [apiVersionHeader]: apiVersion\n      }), authorizationToken && {\n        [authorizationHeader]: `Bearer ${authorizationToken}`\n      }), serverId && {\n        [serverIdHeader]: serverId\n      }), visitor && {\n        [visitor.header]: visitor.id\n      }), headers);\n    }\n\n    getPage(path) {\n      const url = this.urlBuilder.getApiUrl(path);\n      return this.send({\n        url,\n        method: \"GET\"\n      });\n    }\n\n    getComponent(url, payload) {\n      const data = new URLSearchParams(payload);\n      return this.send({\n        url,\n        data: data.toString(),\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        },\n        method: \"POST\"\n      });\n    }\n\n    send(config) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const response = yield this.httpClient(_extends(_extends({}, config), {\n          headers: _extends(_extends({}, this.headers), config.headers)\n        }));\n        return response.data;\n      });\n    }\n\n  };\n  ApiImpl = ApiImpl_1 = __decorate([inversify.injectable(), __param(0, inversify.inject(UrlBuilderService)), __param(1, inversify.inject(ApiOptionsToken)), __metadata(\"design:paramtypes\", [Object, Object])], ApiImpl);\n  const EventBusService = Symbol(\"EventBusService\");\n\n  function EmitterMixin(Super) {\n    return class EmitterMixin extends Super {\n      constructor() {\n        super(...arguments);\n        /**\n        * @todo should be private\n        * @see https://github.com/Microsoft/TypeScript/issues/17293\n        */\n\n        this.emitter = new emittery.Typed();\n        this.on = this.emitter.on.bind(this.emitter);\n        this.off = this.emitter.off.bind(this.emitter);\n        /**\n        * @todo should be private\n        * @see https://github.com/Microsoft/TypeScript/issues/17293\n        */\n\n        this.emit = this.emitter.emit.bind(this.emitter);\n      }\n\n    };\n  }\n\n  const RpcClientService = Symbol.for(\"RpcClientService\");\n  const RpcServerService = Symbol.for(\"RpcServerService\");\n  const TYPE_EVENT = \"brxm:event\";\n  const TYPE_RESPONSE = \"brxm:response\";\n  const TYPE_REQUEST = \"brxm:request\";\n  const STATE_FULFILLED = \"fulfilled\";\n  const STATE_REJECTED = \"rejected\";\n\n  class Dummy {}\n\n  class Rpc extends EmitterMixin(Dummy) {\n    constructor() {\n      super(...arguments);\n      this.calls = new Map();\n      this.callbacks = new Map();\n    }\n\n    generateId() {\n      let id;\n\n      do {\n        id = `${Math.random()}`.slice(2);\n      } while (this.calls.has(id));\n\n      return id;\n    }\n\n    call(command, ...payload) {\n      return new Promise((resolve, reject) => {\n        const id = this.generateId();\n        this.calls.set(id, [resolve, reject]);\n        this.send({\n          id,\n          command,\n          payload,\n          type: TYPE_REQUEST\n        });\n      });\n    }\n\n    register(command, callback) {\n      this.callbacks.set(command, callback);\n    }\n\n    trigger(event, payload) {\n      this.send({\n        event,\n        payload,\n        type: TYPE_EVENT\n      });\n    }\n\n    process(message) {\n      switch (message === null || message === void 0 ? void 0 : message.type) {\n        case TYPE_EVENT:\n          this.processEvent(message);\n          break;\n\n        case TYPE_RESPONSE:\n          this.processResponse(message);\n          break;\n\n        case TYPE_REQUEST:\n          this.processRequest(message);\n          break;\n      }\n    }\n\n    processEvent(event) {\n      this.emit(event.event, event.payload);\n    }\n\n    processResponse(response) {\n      if (!this.calls.has(response.id)) {\n        return;\n      }\n\n      const [resolve, reject] = this.calls.get(response.id);\n      this.calls.delete(response.id);\n\n      if (response.state === STATE_REJECTED) {\n        return void reject(response.result);\n      }\n\n      resolve(response.result);\n    }\n\n    processRequest(request) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const callback = this.callbacks.get(request.command);\n\n        if (!callback) {\n          return;\n        }\n\n        try {\n          return this.send({\n            type: TYPE_RESPONSE,\n            id: request.id,\n            state: STATE_FULFILLED,\n            result: yield callback(...request.payload)\n          });\n        } catch (result) {\n          return this.send({\n            result,\n            type: TYPE_RESPONSE,\n            id: request.id,\n            state: STATE_REJECTED\n          });\n        }\n      });\n    }\n\n  }\n\n  const CmsService = Symbol.for(\"CmsService\");\n  const GLOBAL_WINDOW = typeof window === \"undefined\" ? undefined : window;\n  let CmsImpl = class CmsImpl {\n    constructor(rpcClient, rpcServer, eventBus) {\n      var _a;\n\n      this.rpcClient = rpcClient;\n      this.rpcServer = rpcServer;\n      this.eventBus = eventBus;\n      this.onStateChange = this.onStateChange.bind(this);\n      (_a = this.eventBus) === null || _a === void 0 ? void 0 : _a.on(\"page.ready\", this.onPageReady.bind(this));\n      this.rpcClient.on(\"update\", this.onUpdate.bind(this));\n      this.rpcServer.register(\"inject\", this.inject.bind(this));\n    }\n\n    initialize({\n      window = GLOBAL_WINDOW\n    }) {\n      var _a, _b, _c, _d;\n\n      if (this.window === window) {\n        return;\n      }\n\n      this.window = window;\n\n      if (((_b = (_a = this.window) === null || _a === void 0 ? void 0 : _a.document) === null || _b === void 0 ? void 0 : _b.readyState) !== \"loading\") {\n        return this.onInitialize();\n      }\n\n      (_d = (_c = this.window) === null || _c === void 0 ? void 0 : _c.document) === null || _d === void 0 ? void 0 : _d.addEventListener(\"readystatechange\", this.onStateChange);\n    }\n\n    onInitialize() {\n      this.rpcServer.trigger(\"ready\", undefined);\n    }\n\n    onStateChange() {\n      if (this.window.document.readyState === \"loading\") {\n        return;\n      }\n\n      this.onInitialize();\n      this.window.document.removeEventListener(\"readystatechange\", this.onStateChange);\n    }\n\n    onPageReady() {\n      this.rpcClient.call(\"sync\");\n    }\n\n    onUpdate(event) {\n      var _a;\n\n      (_a = this.eventBus) === null || _a === void 0 ? void 0 : _a.emit(\"cms.update\", event);\n    }\n\n    inject(resource) {\n      var _a;\n\n      if (!((_a = this.window) === null || _a === void 0 ? void 0 : _a.document)) {\n        return Promise.reject(new Error(\"SPA document is not ready.\"));\n      }\n\n      return new Promise((resolve, reject) => {\n        const script = this.window.document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.src = resource;\n        script.addEventListener(\"load\", () => resolve());\n        script.addEventListener(\"error\", () => reject(new Error(`Failed to load resource '${resource}'.`)));\n        this.window.document.body.appendChild(script);\n      });\n    }\n\n  };\n  CmsImpl = __decorate([inversify.injectable(), __param(0, inversify.inject(RpcClientService)), __param(1, inversify.inject(RpcServerService)), __param(2, inversify.inject(EventBusService)), __param(2, inversify.optional()), __metadata(\"design:paramtypes\", [Object, Object, Object])], CmsImpl);\n  const GLOBAL_WINDOW$1 = typeof window === \"undefined\" ? undefined : window;\n  let Cms14Impl = class Cms14Impl {\n    constructor(eventBus) {\n      this.eventBus = eventBus;\n      this.postponed = [];\n    }\n\n    flush() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.postponed.splice(0).forEach(task => task());\n      });\n    }\n\n    postpone(task) {\n      return (...args) => {\n        if (this.api) {\n          return task.apply(this, args);\n        }\n\n        this.postponed.push(task.bind(this, ...args));\n      };\n    }\n\n    initialize({\n      window = GLOBAL_WINDOW$1\n    }) {\n      var _a;\n\n      if (this.api || !window || window.SPA) {\n        return;\n      }\n\n      (_a = this.eventBus) === null || _a === void 0 ? void 0 : _a.on(\"page.ready\", this.postpone(this.sync));\n      window.SPA = {\n        init: this.onInit.bind(this),\n        renderComponent: this.onRenderComponent.bind(this)\n      };\n    }\n\n    onInit(api) {\n      this.api = api;\n      this.flush();\n    }\n\n    onRenderComponent(id, properties) {\n      var _a;\n\n      (_a = this.eventBus) === null || _a === void 0 ? void 0 : _a.emit(\"cms.update\", {\n        id,\n        properties\n      });\n    }\n\n    sync() {\n      this.api.sync();\n    }\n\n  };\n  Cms14Impl = __decorate([inversify.injectable(), __param(0, inversify.inject(EventBusService)), __param(0, inversify.optional()), __metadata(\"design:paramtypes\", [Object])], Cms14Impl);\n  const PostMessageService = Symbol.for(\"PostMessageService\");\n  const GLOBAL_WINDOW$2 = typeof window === \"undefined\" ? undefined : window;\n  let PostMessage = class PostMessage extends Rpc {\n    constructor() {\n      super();\n      this.onMessage = this.onMessage.bind(this);\n    }\n\n    initialize({\n      origin,\n      window = GLOBAL_WINDOW$2\n    }) {\n      var _a, _b;\n\n      (_a = this.window) === null || _a === void 0 ? void 0 : _a.removeEventListener(\"message\", this.onMessage, false);\n      this.origin = origin;\n      this.window = window;\n      (_b = this.window) === null || _b === void 0 ? void 0 : _b.addEventListener(\"message\", this.onMessage, false);\n    }\n\n    send(message) {\n      var _a, _b;\n\n      if (this.origin) {\n        (_b = (_a = this.window) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.postMessage(message, this.origin);\n      }\n    }\n\n    onMessage(event) {\n      if (!event.data || !isMatched(event.origin, this.origin === \"*\" ? \"\" : this.origin)) {\n        return;\n      }\n\n      this.process(event.data);\n    }\n\n  };\n  PostMessage = __decorate([inversify.injectable(), __metadata(\"design:paramtypes\", [])], PostMessage);\n\n  function CmsModule() {\n    return new inversify.ContainerModule(bind => {\n      bind(EventBusService).toDynamicValue(() => new emittery.Typed()).inSingletonScope().when(() => typeof window !== \"undefined\");\n      bind(PostMessageService).to(PostMessage).inSingletonScope();\n      bind(RpcClientService).toService(PostMessageService);\n      bind(RpcServerService).toService(PostMessageService);\n      bind(CmsService).to(CmsImpl).inSingletonScope().whenTargetIsDefault();\n      bind(CmsService).to(Cms14Impl).inSingletonScope().whenTargetNamed(\"cms14\");\n    });\n  }\n  /**\n  * Link to a page outside the current application.\n  */\n\n\n  const TYPE_LINK_EXTERNAL = \"external\";\n  /**\n  * Link to a page inside the current application.\n  */\n\n  const TYPE_LINK_INTERNAL = \"internal\";\n  /**\n  * Link to a CMS resource.\n  */\n\n  const TYPE_LINK_RESOURCE = \"resource\";\n  /**\n  * Unresolved link.\n  */\n\n  const TYPE_LINK_UNKNOWN = \"unknown\";\n  /**\n  * Checks whether a value is a link.\n  * @param value The value to check.\n  */\n\n  function isLink(value) {\n    return !!value && (Object.prototype.hasOwnProperty.call(value, \"href\") || Object.prototype.hasOwnProperty.call(value, \"type\") && [TYPE_LINK_EXTERNAL, TYPE_LINK_INTERNAL, TYPE_LINK_RESOURCE, TYPE_LINK_UNKNOWN].includes(value.type));\n  }\n\n  class SimpleFactory {\n    constructor() {\n      this.mapping = new Map();\n    }\n    /**\n    * Registers a builder for the specified type.\n    * @param type The entity type.\n    * @param builder The entity builder.\n    */\n\n\n    register(type, builder) {\n      this.mapping.set(type, builder);\n      return this;\n    }\n\n  }\n\n  let LinkFactory = class LinkFactory extends SimpleFactory {\n    create(link) {\n      if (isLink(link)) {\n        return this.createLink(link);\n      }\n\n      return this.createPath(link);\n    }\n\n    createLink(link) {\n      if (!link.type || typeof link.href === \"undefined\" || !this.mapping.has(link.type)) {\n        return link.href;\n      }\n\n      const builder = this.mapping.get(link.type);\n      return builder(link.href);\n    }\n\n    createPath(path) {\n      return this.createLink({\n        href: path,\n        type: TYPE_LINK_INTERNAL\n      });\n    }\n\n  };\n  LinkFactory = __decorate([inversify.injectable()], LinkFactory);\n  const MetaCollectionFactory = Symbol.for(\"MetaCollectionFactory\");\n  const ComponentChildrenToken = Symbol.for(\"ComponentChildrenToken\");\n  const ComponentModelToken = Symbol.for(\"ComponentModelToken\");\n  /**\n  * Generic component type.\n  */\n\n  const TYPE_COMPONENT = \"component\";\n  /**\n  * Container item type.\n  */\n\n  const TYPE_COMPONENT_CONTAINER_ITEM = \"container-item\";\n  /**\n  * Container type.\n  */\n\n  const TYPE_COMPONENT_CONTAINER = \"container\";\n  let ComponentImpl = class ComponentImpl {\n    constructor(model, children, linkFactory, metaFactory) {\n      this.model = model;\n      this.children = children;\n      this.linkFactory = linkFactory;\n      this.meta = metaFactory(this.model.meta);\n    }\n\n    getId() {\n      return this.model.id;\n    }\n\n    getMeta() {\n      return this.meta;\n    }\n\n    getModels() {\n      return this.model.models || {};\n    }\n\n    getUrl() {\n      return this.linkFactory.create(this.model.links.self);\n    }\n\n    getName() {\n      return this.model.name || \"\";\n    }\n\n    getParameters() {\n      return this.model.meta.params || {};\n    }\n\n    getChildren() {\n      return this.children;\n    }\n\n    getComponent(...componentNames) {\n      let component = this;\n\n      while (componentNames.length && component) {\n        const name = componentNames.shift();\n        component = component.getChildren().find(component => component.getName() === name);\n      }\n\n      return component;\n    }\n\n    getComponentById(id) {\n      const queue = [this];\n\n      while (queue.length) {\n        const component = queue.shift();\n\n        if (component.getId() === id) {\n          return component;\n        }\n\n        queue.push(...component.getChildren());\n      }\n    }\n\n  };\n  ComponentImpl = __decorate([inversify.injectable(), __param(0, inversify.inject(ComponentModelToken)), __param(1, inversify.inject(ComponentChildrenToken)), __param(2, inversify.inject(LinkFactory)), __param(3, inversify.inject(MetaCollectionFactory)), __metadata(\"design:paramtypes\", [Object, Array, LinkFactory, Function])], ComponentImpl);\n  /**\n  * Checks whether a value is a page component.\n  * @param value The value to check.\n  */\n\n  function isComponent(value) {\n    return value instanceof ComponentImpl;\n  }\n  /**\n  * Generic component type.\n  */\n\n\n  const TYPE_COMPONENT$1 = \"COMPONENT\";\n  /**\n  * Container item type.\n  */\n\n  const TYPE_COMPONENT_CONTAINER_ITEM$1 = \"CONTAINER_ITEM_COMPONENT\";\n  /**\n  * Container type.\n  */\n\n  const TYPE_COMPONENT_CONTAINER$1 = \"CONTAINER_COMPONENT\";\n  let ComponentImpl$1 = class ComponentImpl {\n    constructor(model, children, metaFactory, urlBuilder) {\n      this.model = model;\n      this.children = children;\n      this.urlBuilder = urlBuilder;\n      this.meta = metaFactory(this.model._meta);\n    }\n\n    getId() {\n      return this.model.id;\n    }\n\n    getMeta() {\n      return this.meta;\n    }\n\n    getModels() {\n      return this.model.models || {};\n    }\n\n    getUrl() {\n      return this.urlBuilder.getApiUrl(this.model._links.componentRendering.href);\n    }\n\n    getName() {\n      return this.model.name || \"\";\n    }\n\n    getParameters() {\n      return this.model._meta.params || {};\n    }\n\n    getChildren() {\n      return this.children;\n    }\n\n    getComponent(...componentNames) {\n      let component = this;\n\n      while (componentNames.length && component) {\n        const name = componentNames.shift();\n        component = component.getChildren().find(component => component.getName() === name);\n      }\n\n      return component;\n    }\n\n    getComponentById(id) {\n      const queue = [this];\n\n      while (queue.length) {\n        const component = queue.shift();\n\n        if (component.getId() === id) {\n          return component;\n        }\n\n        queue.push(...component.getChildren());\n      }\n    }\n\n  };\n  ComponentImpl$1 = __decorate([inversify.injectable(), __param(0, inversify.inject(ComponentModelToken)), __param(1, inversify.inject(ComponentChildrenToken)), __param(2, inversify.inject(MetaCollectionFactory)), __param(3, inversify.inject(UrlBuilderService)), __metadata(\"design:paramtypes\", [Object, Array, Function, Object])], ComponentImpl$1);\n  /**\n  * Checks whether a value is a page component.\n  * @param value The value to check.\n  */\n\n  function isComponent$1(value) {\n    return value instanceof ComponentImpl$1;\n  }\n  /**\n  * A blocked container with blocked items.\n  */\n\n\n  const TYPE_CONTAINER_BOX = \"hst.vbox\";\n  /**\n  * An unordered list container.\n  */\n\n  const TYPE_CONTAINER_UNORDERED_LIST = \"hst.unorderedlist\";\n  /**\n  * An ordered list container.\n  */\n\n  const TYPE_CONTAINER_ORDERED_LIST = \"hst.orderedlist\";\n  /**\n  * A blocked container with inline items.\n  */\n\n  const TYPE_CONTAINER_INLINE = \"hst.span\";\n  /**\n  * A container without surrounding markup.\n  */\n\n  const TYPE_CONTAINER_NO_MARKUP = \"hst.nomarkup\";\n  let ContainerImpl = class ContainerImpl extends ComponentImpl {\n    getChildren() {\n      return this.children;\n    }\n\n    getType() {\n      var _a;\n\n      return (_a = this.model.xtype) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n    }\n\n  };\n  ContainerImpl = __decorate([inversify.injectable()], ContainerImpl);\n  /**\n  * Checks whether a value is a page container.\n  * @param value The value to check.\n  */\n\n  function isContainer(value) {\n    return value instanceof ContainerImpl;\n  }\n\n  let ContainerImpl$1 = class ContainerImpl extends ComponentImpl$1 {\n    getChildren() {\n      return this.children;\n    }\n\n    getType() {\n      var _a;\n\n      return (_a = this.model.xtype) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n    }\n\n  };\n  ContainerImpl$1 = __decorate([inversify.injectable()], ContainerImpl$1);\n  /**\n  * Checks whether a value is a page container.\n  * @param value The value to check.\n  */\n\n  function isContainer$1(value) {\n    return value instanceof ContainerImpl$1;\n  }\n\n  const EventBusService$1 = Symbol(\"EventBusService\");\n  /**\n  * Checks whether a value is a reference.\n  * @param value The value to check.\n  */\n\n  function isReference(value) {\n    return !!(value === null || value === void 0 ? void 0 : value.$ref);\n  }\n\n  function resolve(object, reference) {\n    return reference.$ref.split(\"/\").reduce((value, key) => key ? value === null || value === void 0 ? void 0 : value[key] : object, object);\n  }\n\n  const PARAMETER_HIDDEN = \"com.onehippo.cms7.targeting.TargetingParameterUtil.hide\";\n  let ContainerItemImpl = class ContainerItemImpl extends EmitterMixin(ComponentImpl) {\n    constructor(model, linkFactory, metaFactory, eventBus) {\n      super(model, [], linkFactory, metaFactory);\n      this.model = model;\n      this.metaFactory = metaFactory;\n      eventBus === null || eventBus === void 0 ? void 0 : eventBus.on(\"page.update\", this.onPageUpdate.bind(this));\n    }\n\n    onPageUpdate(event) {\n      const page = event.page;\n      const model = resolve(page, page.root);\n\n      if ((model === null || model === void 0 ? void 0 : model.id) !== this.getId()) {\n        return;\n      }\n\n      this.model = model;\n      this.meta = this.metaFactory(model.meta);\n      this.emit(\"update\", {});\n    }\n\n    getType() {\n      return this.model.label;\n    }\n\n    isHidden() {\n      var _a;\n\n      return ((_a = this.model.meta.params) === null || _a === void 0 ? void 0 : _a[PARAMETER_HIDDEN]) === \"on\";\n    }\n\n    getParameters() {\n      return this.model.meta.paramsInfo || {};\n    }\n\n  };\n  ContainerItemImpl = __decorate([inversify.injectable(), __param(0, inversify.inject(ComponentModelToken)), __param(1, inversify.inject(LinkFactory)), __param(2, inversify.inject(MetaCollectionFactory)), __param(3, inversify.inject(EventBusService$1)), __param(3, inversify.optional()), __metadata(\"design:paramtypes\", [Object, LinkFactory, Function, Object])], ContainerItemImpl);\n  /**\n  * Checks whether a value is a page container item.\n  * @param value The value to check.\n  */\n\n  function isContainerItem(value) {\n    return value instanceof ContainerItemImpl;\n  }\n\n  const PARAMETER_HIDDEN$1 = \"com.onehippo.cms7.targeting.TargetingParameterUtil.hide\";\n  let ContainerItemImpl$1 = class ContainerItemImpl extends EmitterMixin(ComponentImpl$1) {\n    constructor(model, metaFactory, urlBuilder, eventBus) {\n      super(model, [], metaFactory, urlBuilder);\n      this.model = model;\n      this.metaFactory = metaFactory;\n      eventBus === null || eventBus === void 0 ? void 0 : eventBus.on(\"page.update\", this.onPageUpdate.bind(this));\n    }\n\n    onPageUpdate(event) {\n      const {\n        page: model\n      } = event.page;\n\n      if (model.id !== this.getId()) {\n        return;\n      }\n\n      this.model = model;\n      this.meta = this.metaFactory(model._meta);\n      this.emit(\"update\", {});\n    }\n\n    getType() {\n      return this.model.label;\n    }\n\n    isHidden() {\n      var _a;\n\n      return ((_a = this.model._meta.params) === null || _a === void 0 ? void 0 : _a[PARAMETER_HIDDEN$1]) === \"on\";\n    }\n\n    getParameters() {\n      return this.model._meta.paramsInfo || {};\n    }\n\n  };\n  ContainerItemImpl$1 = __decorate([inversify.injectable(), __param(0, inversify.inject(ComponentModelToken)), __param(1, inversify.inject(MetaCollectionFactory)), __param(2, inversify.inject(UrlBuilderService)), __param(3, inversify.inject(EventBusService$1)), __param(3, inversify.optional()), __metadata(\"design:paramtypes\", [Object, Function, Object, Object])], ContainerItemImpl$1);\n  /**\n  * Checks whether a value is a page container item.\n  * @param value The value to check.\n  */\n\n  function isContainerItem$1(value) {\n    return value instanceof ContainerItemImpl$1;\n  }\n  /**\n  * A component factory producing components based on a type.\n  */\n\n\n  let ComponentFactory = class ComponentFactory extends SimpleFactory {\n    /**\n    * Produces a component based on the page model.\n    * @param page The page model.\n    */\n    create(page) {\n      var _a, _b;\n\n      const heap = [page.root];\n      const pool = new Map();\n\n      for (let i = 0; i < heap.length; i++) {\n        heap.push(...((_b = (_a = resolve(page, heap[i])) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : []));\n      }\n\n      return heap.reverse().reduce((previous, reference) => {\n        var _a, _b;\n\n        const model = resolve(page, reference);\n        const children = (_b = (_a = model === null || model === void 0 ? void 0 : model.children) === null || _a === void 0 ? void 0 : _a.map(child => pool.get(resolve(page, child)))) !== null && _b !== void 0 ? _b : [];\n        const component = this.buildComponent(model, children);\n        pool.set(model, component);\n        return component;\n      }, undefined);\n    }\n\n    buildComponent(model, children) {\n      const builder = this.mapping.get(model.type);\n\n      if (!builder) {\n        throw new Error(`Unsupported component type: '${model.type}'.`);\n      }\n\n      return builder(model, children);\n    }\n\n  };\n  ComponentFactory = __decorate([inversify.injectable()], ComponentFactory);\n  let ContentFactory = class ContentFactory extends SimpleFactory {\n    create(model) {\n      if (!this.mapping.has(model.type)) {\n        return model;\n      }\n\n      return this.mapping.get(model.type)(model);\n    }\n\n  };\n  ContentFactory = __decorate([inversify.injectable()], ContentFactory);\n  const DomParserService = Symbol.for(\"DomParserService\");\n  const LinkRewriterService = Symbol.for(\"LinkRewriterService\");\n  const XmlSerializerService = Symbol.for(\"XmlSerializerService\");\n  const BODY_CONTENTS = /^<body.*?>(.*)<\\/body>$/;\n  let LinkRewriterImpl = class LinkRewriterImpl {\n    constructor(linkFactory, domParser, xmlSerializer) {\n      this.linkFactory = linkFactory;\n      this.domParser = domParser;\n      this.xmlSerializer = xmlSerializer;\n    }\n\n    rewrite(content, type = \"text/html\") {\n      const document = this.domParser.parseFromString(`<body>${content}</body>`, type);\n      this.rewriteAnchors(document);\n      this.rewriteImages(document);\n      const body = this.xmlSerializer.serializeToString(document);\n      return body.replace(BODY_CONTENTS, \"$1\");\n    }\n\n    rewriteAnchors(document) {\n      Array.from(document.getElementsByTagName(\"a\")).filter(element => element.hasAttribute(\"href\") && element.hasAttribute(\"data-type\")).forEach(element => {\n        var _a;\n\n        const url = this.linkFactory.create({\n          href: (_a = element.getAttribute(\"href\")) !== null && _a !== void 0 ? _a : undefined,\n          type: element.getAttribute(\"data-type\")\n        });\n\n        if (url) {\n          element.setAttribute(\"href\", url);\n        }\n      });\n    }\n\n    rewriteImages(document) {\n      Array.from(document.getElementsByTagName(\"img\")).filter(element => element.hasAttribute(\"src\")).forEach(element => {\n        var _a;\n\n        const url = this.linkFactory.create({\n          href: (_a = element.getAttribute(\"src\")) !== null && _a !== void 0 ? _a : undefined,\n          type: TYPE_LINK_RESOURCE\n        });\n\n        if (url) {\n          element.setAttribute(\"src\", url);\n        }\n      });\n    }\n\n  };\n  LinkRewriterImpl = __decorate([inversify.injectable(), __param(0, inversify.inject(LinkFactory)), __param(1, inversify.inject(DomParserService)), __param(2, inversify.inject(XmlSerializerService)), __metadata(\"design:paramtypes\", [LinkFactory, xmldom.DOMParser, xmldom.XMLSerializer])], LinkRewriterImpl);\n  const PageModelToken = Symbol.for(\"PageModelToken\");\n  let PageImpl = class PageImpl {\n    constructor(model, componentFactory, contentFactory, linkFactory, linkRewriter, metaFactory, cmsEventBus, eventBus) {\n      this.model = model;\n      this.contentFactory = contentFactory;\n      this.linkFactory = linkFactory;\n      this.linkRewriter = linkRewriter;\n      this.metaFactory = metaFactory;\n      this.cmsEventBus = cmsEventBus;\n      this.content = new WeakMap();\n      eventBus === null || eventBus === void 0 ? void 0 : eventBus.on(\"page.update\", this.onPageUpdate.bind(this));\n      this.root = componentFactory.create(model);\n    }\n\n    onPageUpdate(event) {\n      _extends(this.model.page, event.page.page);\n    }\n\n    getComponent(...componentNames) {\n      var _a;\n\n      return (_a = this.root) === null || _a === void 0 ? void 0 : _a.getComponent(...componentNames);\n    }\n\n    getContent(reference) {\n      const model = resolve(this.model, isReference(reference) ? reference : {\n        $ref: `/page/${reference}`\n      });\n\n      if (!model) {\n        return undefined;\n      }\n\n      if (!this.content.has(model)) {\n        this.content.set(model, this.contentFactory.create(model));\n      }\n\n      return this.content.get(model);\n    }\n\n    getDocument() {\n      return this.model.document && this.getContent(this.model.document);\n    }\n\n    getMeta(meta) {\n      return this.metaFactory(meta);\n    }\n\n    getTitle() {\n      var _a, _b;\n\n      return (_b = (_a = resolve(this.model, this.model.root)) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.pageTitle;\n    }\n\n    getUrl(link) {\n      var _a, _b, _c;\n\n      if (typeof link === \"undefined\" || isLink(link) || isAbsoluteUrl(link)) {\n        return this.linkFactory.create((_b = (_a = link) !== null && _a !== void 0 ? _a : this.model.links.site) !== null && _b !== void 0 ? _b : \"\");\n      }\n\n      return resolveUrl(link, (_c = this.linkFactory.create(this.model.links.site)) !== null && _c !== void 0 ? _c : \"\");\n    }\n\n    getVersion() {\n      return this.model.meta.version;\n    }\n\n    getVisitor() {\n      return this.model.meta.visitor;\n    }\n\n    getVisit() {\n      return this.model.meta.visit;\n    }\n\n    isPreview() {\n      return !!this.model.meta.preview;\n    }\n\n    rewriteLinks(content, type = \"text/html\") {\n      return this.linkRewriter.rewrite(content, type);\n    }\n\n    sync() {\n      var _a;\n\n      (_a = this.cmsEventBus) === null || _a === void 0 ? void 0 : _a.emit(\"page.ready\", {});\n    }\n\n    toJSON() {\n      return this.model;\n    }\n\n  };\n  PageImpl = __decorate([inversify.injectable(), __param(0, inversify.inject(PageModelToken)), __param(1, inversify.inject(ComponentFactory)), __param(2, inversify.inject(ContentFactory)), __param(3, inversify.inject(LinkFactory)), __param(4, inversify.inject(LinkRewriterService)), __param(5, inversify.inject(MetaCollectionFactory)), __param(6, inversify.inject(EventBusService)), __param(6, inversify.optional()), __param(7, inversify.inject(EventBusService$1)), __param(7, inversify.optional()), __metadata(\"design:paramtypes\", [Object, ComponentFactory, ContentFactory, LinkFactory, Object, Function, Object, Object])], PageImpl);\n  /**\n  * Checks whether a value is a page.\n  * @param value The value to check.\n  */\n\n  function isPage(value) {\n    return value instanceof PageImpl;\n  }\n  /**\n  * A component factory producing components based on a type.\n  */\n\n\n  let ComponentFactory$1 = class ComponentFactory extends SimpleFactory {\n    /**\n    * Produces a component based on the model.\n    * @param model The component model.\n    */\n    create(model) {\n      var _a, _b;\n\n      let component;\n      const queue = [{\n        model\n      }];\n\n      while (queue.length) {\n        const head = queue.shift();\n\n        if (!head.children && ((_a = head.model.components) === null || _a === void 0 ? void 0 : _a.length)) {\n          head.children = [];\n          queue.unshift(...head.model.components.map(model => ({\n            model,\n            siblings: head.children\n          })), head);\n          continue;\n        }\n\n        component = this.buildComponent(head.model, (_b = head.children) !== null && _b !== void 0 ? _b : []);\n\n        if (head.siblings) {\n          head.siblings.push(component);\n        }\n      }\n\n      return component;\n    }\n\n    buildComponent(model, children) {\n      const builder = this.mapping.get(model.type);\n\n      if (!builder) {\n        throw new Error(`Unsupported component type: '${model.type}'.`);\n      }\n\n      return builder(model, children);\n    }\n\n  };\n  ComponentFactory$1 = __decorate([inversify.injectable()], ComponentFactory$1);\n  const ContentFactory$1 = Symbol.for(\"ContentFactory\");\n  var PageImpl_1;\n  let PageImpl$1 = PageImpl_1 = class PageImpl {\n    constructor(model, componentFactory, contentFactory, linkFactory, linkRewriter, metaFactory, cmsEventBus, eventBus) {\n      this.model = model;\n      this.contentFactory = contentFactory;\n      this.linkFactory = linkFactory;\n      this.linkRewriter = linkRewriter;\n      this.metaFactory = metaFactory;\n      this.cmsEventBus = cmsEventBus;\n      eventBus === null || eventBus === void 0 ? void 0 : eventBus.on(\"page.update\", this.onPageUpdate.bind(this));\n      this.root = componentFactory.create(model.page);\n      this.content = new Map(Object.entries(model.content || {}).map(([alias, model]) => [alias, this.contentFactory(model)]));\n    }\n\n    onPageUpdate(event) {\n      Object.entries(event.page.content || {}).forEach(([alias, model]) => this.content.set(alias, this.contentFactory(model)));\n    }\n\n    static getContentReference(reference) {\n      return reference.$ref.split(\"/\", 3)[2] || \"\";\n    }\n\n    getComponent(...componentNames) {\n      return this.root.getComponent(...componentNames);\n    }\n\n    getContent(reference) {\n      const contentReference = isReference(reference) ? PageImpl_1.getContentReference(reference) : reference;\n      return this.content.get(contentReference);\n    }\n\n    getDocument() {\n      throw new Error(\"The page document is not supported by this version of the Page Model API.\");\n    }\n\n    getMeta(meta) {\n      return this.metaFactory(meta);\n    }\n\n    getTitle() {\n      return this.model.page._meta.pageTitle;\n    }\n\n    getUrl(link) {\n      var _a;\n\n      return this.linkFactory.create((_a = link) !== null && _a !== void 0 ? _a : _extends(_extends({}, this.model._links.site), {\n        type: TYPE_LINK_INTERNAL\n      }));\n    }\n\n    getVersion() {\n      return this.model._meta.version;\n    }\n\n    getVisitor() {\n      return this.model._meta.visitor;\n    }\n\n    getVisit() {\n      return this.model._meta.visit;\n    }\n\n    isPreview() {\n      return !!this.model._meta.preview;\n    }\n\n    rewriteLinks(content, type = \"text/html\") {\n      return this.linkRewriter.rewrite(content, type);\n    }\n\n    sync() {\n      var _a;\n\n      (_a = this.cmsEventBus) === null || _a === void 0 ? void 0 : _a.emit(\"page.ready\", {});\n    }\n\n    toJSON() {\n      return this.model;\n    }\n\n  };\n  PageImpl$1 = PageImpl_1 = __decorate([inversify.injectable(), __param(0, inversify.inject(PageModelToken)), __param(1, inversify.inject(ComponentFactory$1)), __param(2, inversify.inject(ContentFactory$1)), __param(3, inversify.inject(LinkFactory)), __param(4, inversify.inject(LinkRewriterService)), __param(5, inversify.inject(MetaCollectionFactory)), __param(6, inversify.inject(EventBusService)), __param(6, inversify.optional()), __param(7, inversify.inject(EventBusService$1)), __param(7, inversify.optional()), __metadata(\"design:paramtypes\", [Object, ComponentFactory$1, Function, LinkFactory, Object, Function, Object, Object])], PageImpl$1);\n  /**\n  * Checks whether a value is a page.\n  * @param value The value to check.\n  */\n\n  function isPage$1(value) {\n    return value instanceof PageImpl$1;\n  }\n\n  const ContentModelToken = Symbol.for(\"ContentModelToken\");\n  let ContentImpl = class ContentImpl {\n    constructor(model, linkFactory, metaFactory) {\n      var _a;\n\n      this.model = model;\n      this.linkFactory = linkFactory;\n      this.meta = metaFactory((_a = this.model._meta) !== null && _a !== void 0 ? _a : {});\n    }\n\n    getId() {\n      return this.model.id;\n    }\n\n    getLocale() {\n      return this.model.localeString;\n    }\n\n    getMeta() {\n      return this.meta;\n    }\n\n    getName() {\n      return this.model.name;\n    }\n\n    getData() {\n      return this.model;\n    }\n\n    getUrl() {\n      return this.linkFactory.create(this.model._links.site);\n    }\n\n  };\n  ContentImpl = __decorate([inversify.injectable(), __param(0, inversify.inject(ContentModelToken)), __param(1, inversify.inject(LinkFactory)), __param(2, inversify.inject(MetaCollectionFactory)), __metadata(\"design:paramtypes\", [Object, LinkFactory, Function])], ContentImpl);\n  /**\n  * Checks whether a value is a content.\n  * @param value The value to check.\n  */\n\n  function isContent(value) {\n    return value instanceof ContentImpl;\n  }\n\n  const DocumentModelToken = Symbol.for(\"DocumentModelToken\");\n  const TYPE_DOCUMENT = \"document\";\n  let DocumentImpl = class DocumentImpl {\n    constructor(model, linkFactory, metaFactory) {\n      var _a;\n\n      this.model = model;\n      this.linkFactory = linkFactory;\n      this.meta = metaFactory((_a = this.model.meta) !== null && _a !== void 0 ? _a : {});\n    }\n\n    getId() {\n      return this.model.data.id;\n    }\n\n    getLocale() {\n      return this.model.data.localeString;\n    }\n\n    getMeta() {\n      return this.meta;\n    }\n\n    getName() {\n      return this.model.data.name;\n    }\n\n    getData() {\n      return this.model.data;\n    }\n\n    getUrl() {\n      return this.linkFactory.create(this.model.links.site);\n    }\n\n  };\n  DocumentImpl = __decorate([inversify.injectable(), __param(0, inversify.inject(DocumentModelToken)), __param(1, inversify.inject(LinkFactory)), __param(2, inversify.inject(MetaCollectionFactory)), __metadata(\"design:paramtypes\", [Object, LinkFactory, Function])], DocumentImpl);\n  /**\n  * Checks whether a value is a document.\n  * @param value The value to check.\n  */\n\n  function isDocument(value) {\n    return value instanceof DocumentImpl;\n  }\n\n  const ImageFactory = Symbol.for(\"ImageFactory\");\n  const ImageModelToken = Symbol.for(\"ImageModelToken\");\n  let ImageImpl = class ImageImpl {\n    constructor(model, linkFactory) {\n      this.model = model;\n      this.linkFactory = linkFactory;\n    }\n\n    getDisplayName() {\n      return this.model.displayName;\n    }\n\n    getFileName() {\n      var _a;\n\n      return (_a = this.model.fileName) !== null && _a !== void 0 ? _a : undefined;\n    }\n\n    getHeight() {\n      return this.model.height;\n    }\n\n    getMimeType() {\n      return this.model.mimeType;\n    }\n\n    getName() {\n      return this.model.name;\n    }\n\n    getSize() {\n      return this.model.size;\n    }\n\n    getUrl() {\n      return this.model.links.site && this.linkFactory.create(this.model.links.site);\n    }\n\n    getWidth() {\n      return this.model.width;\n    }\n\n  };\n  ImageImpl = __decorate([inversify.injectable(), __param(0, inversify.inject(ImageModelToken)), __param(1, inversify.inject(LinkFactory)), __metadata(\"design:paramtypes\", [Object, LinkFactory])], ImageImpl);\n  const ImageSetModelToken = Symbol.for(\"ImageSetModelToken\");\n  const TYPE_IMAGE_SET = \"imageset\";\n  let ImageSetImpl = class ImageSetImpl {\n    constructor(model, imageFactory) {\n      this.model = model;\n      this.original = model.data.original ? imageFactory(model.data.original) : undefined;\n      this.thumbnail = model.data.thumbnail ? imageFactory(model.data.thumbnail) : undefined;\n    }\n\n    getDescription() {\n      var _a;\n\n      return (_a = this.model.data.description) !== null && _a !== void 0 ? _a : undefined;\n    }\n\n    getDisplayName() {\n      return this.model.data.displayName;\n    }\n\n    getFileName() {\n      var _a;\n\n      return (_a = this.model.data.fileName) !== null && _a !== void 0 ? _a : undefined;\n    }\n\n    getId() {\n      return this.model.data.id;\n    }\n\n    getLocale() {\n      var _a;\n\n      return (_a = this.model.data.localeString) !== null && _a !== void 0 ? _a : undefined;\n    }\n\n    getName() {\n      return this.model.data.name;\n    }\n\n    getOriginal() {\n      return this.original;\n    }\n\n    getThumbnail() {\n      return this.thumbnail;\n    }\n\n  };\n  ImageSetImpl = __decorate([inversify.injectable(), __param(0, inversify.inject(ImageSetModelToken)), __param(1, inversify.inject(ImageFactory)), __metadata(\"design:paramtypes\", [Object, Function])], ImageSetImpl);\n  /**\n  * Checks whether a value is an image set.\n  * @param value The value to check.\n  */\n\n  function isImageSet(value) {\n    return value instanceof ImageSetImpl;\n  }\n\n  const MenuItemFactory = Symbol.for(\"MenuItemFactory\");\n  const MenuItemModelToken = Symbol.for(\"MenuItemModelToken\");\n  let MenuItemImpl = class MenuItemImpl {\n    constructor(model, linkFactory, menuItemFactory) {\n      this.model = model;\n      this.linkFactory = linkFactory;\n      this.children = model.childMenuItems.map(menuItemFactory);\n    }\n\n    getChildren() {\n      return this.children;\n    }\n\n    getDepth() {\n      return this.model.depth;\n    }\n\n    getLink() {\n      return this.model.links.site;\n    }\n\n    getName() {\n      return this.model.name;\n    }\n\n    getParameters() {\n      return this.model.parameters;\n    }\n\n    getUrl() {\n      return this.model.links.site && this.linkFactory.create(this.model.links.site);\n    }\n\n    isExpanded() {\n      return this.model.expanded;\n    }\n\n    isRepositoryBased() {\n      return this.model.repositoryBased;\n    }\n\n    isSelected() {\n      return this.model.selected;\n    }\n\n  };\n  MenuItemImpl = __decorate([inversify.injectable(), __param(0, inversify.inject(MenuItemModelToken)), __param(1, inversify.inject(LinkFactory)), __param(2, inversify.inject(MenuItemFactory)), __metadata(\"design:paramtypes\", [Object, LinkFactory, Function])], MenuItemImpl);\n  const MenuModelToken = Symbol.for(\"MenuModelToken\");\n  const TYPE_MENU = \"menu\";\n  let MenuImpl = class MenuImpl {\n    constructor(model, metaFactory, menuItemFactory) {\n      this.model = model;\n      this.items = model.data.siteMenuItems.map(menuItemFactory);\n      this.meta = metaFactory(model.meta);\n      this.selected = model.data.selectSiteMenuItem ? menuItemFactory(model.data.selectSiteMenuItem) : undefined;\n    }\n\n    getItems() {\n      return this.items;\n    }\n\n    getMeta() {\n      return this.meta;\n    }\n\n    getName() {\n      return this.model.data.name;\n    }\n\n    getSelected() {\n      return this.selected;\n    }\n\n  };\n  MenuImpl = __decorate([inversify.injectable(), __param(0, inversify.inject(MenuModelToken)), __param(1, inversify.inject(MetaCollectionFactory)), __param(2, inversify.inject(MenuItemFactory)), __metadata(\"design:paramtypes\", [Object, Function, Function])], MenuImpl);\n  /**\n  * Checks whether a value is a menu.\n  * @param value The value to check.\n  */\n\n  function isMenu(value) {\n    return value instanceof MenuImpl;\n  }\n\n  const TYPE_META_COMMENT = \"comment\";\n  /**\n  * Meta-data following before a page component.\n  */\n\n  const META_POSITION_BEGIN = \"begin\";\n  /**\n  * Meta-data following after a page component.\n  */\n\n  const META_POSITION_END = \"end\";\n\n  class MetaImpl {\n    constructor(model, position) {\n      this.model = model;\n      this.position = position;\n    }\n\n    getData() {\n      return this.model.data;\n    }\n\n    getPosition() {\n      return this.position;\n    }\n\n  }\n  /**\n  * Checks whether a value is a meta-data object.\n  * @param value The value to check.\n  */\n\n\n  function isMeta(value) {\n    return value instanceof MetaImpl;\n  }\n\n  const HTML_COMMENT = /^<!--(.*)-->$/;\n  /**\n  * Meta information stored in HST-comments.\n  */\n\n  class MetaCommentImpl extends MetaImpl {\n    getData() {\n      const data = super.getData();\n      const [, payload = data] = data.match(HTML_COMMENT) || [];\n      return payload;\n    }\n\n  }\n  /**\n  * Checks whether a value is a meta-data comment.\n  * @param value The value to check.\n  */\n\n\n  function isMetaComment(value) {\n    return value instanceof MetaCommentImpl;\n  }\n\n  const PageFactory = Symbol.for(\"PageFactory\");\n  /**\n  * The factory to produce meta-data collection from the page model meta-data.\n  */\n\n  let MetaFactory = class MetaFactory extends SimpleFactory {\n    create(meta, position) {\n      const builder = this.mapping.get(meta.type);\n\n      if (!builder) {\n        throw new Error(`Unsupported meta type: '${meta.type}'.`);\n      }\n\n      return builder(meta, position);\n    }\n\n  };\n  MetaFactory = __decorate([inversify.injectable()], MetaFactory);\n  var MetaCollectionImpl_1;\n  const MetaCollectionModelToken = Symbol.for(\"MetaCollectionModelToken\");\n  let MetaCollectionImpl = MetaCollectionImpl_1 = class MetaCollectionImpl extends Array {\n    constructor(model, metaFactory) {\n      super(...(model.beginNodeSpan || []).map(model => metaFactory.create(model, META_POSITION_BEGIN)), ...(model.endNodeSpan || []).map(model => metaFactory.create(model, META_POSITION_END)));\n      this.comments = [];\n      const prototype = Object.create(MetaCollectionImpl_1.prototype);\n      prototype.constructor = Array.prototype.constructor;\n      Object.setPrototypeOf(this, prototype);\n      Object.freeze(this);\n    }\n\n    clear() {\n      this.comments.splice(0).forEach(comment => comment.remove());\n    }\n\n    render(head, tail) {\n      var _a;\n\n      const document = (_a = head.ownerDocument) !== null && _a !== void 0 ? _a : tail.ownerDocument;\n\n      if (!document) {\n        return;\n      }\n\n      this.comments.push(...this.filter(isMetaComment).filter(meta => meta.getPosition() === META_POSITION_BEGIN).map(meta => document.createComment(meta.getData())).map(comment => {\n        var _a;\n\n        (_a = head.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(comment, head);\n        return comment;\n      }), ...this.filter(isMetaComment).filter(meta => meta.getPosition() === META_POSITION_END).reverse().map(meta => document.createComment(meta.getData())).map(comment => {\n        var _a, _b;\n\n        if (tail.nextSibling) {\n          (_a = tail.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(comment, tail.nextSibling);\n        } else {\n          (_b = tail.parentNode) === null || _b === void 0 ? void 0 : _b.appendChild(comment);\n        }\n\n        return comment;\n      }));\n    }\n\n  };\n  MetaCollectionImpl = MetaCollectionImpl_1 = __decorate([inversify.injectable(), __param(0, inversify.inject(MetaCollectionModelToken)), __param(1, inversify.inject(MetaFactory)), __metadata(\"design:paramtypes\", [Object, MetaFactory])], MetaCollectionImpl);\n\n  function PageModule() {\n    return new inversify.ContainerModule(bind => {\n      bind(EventBusService$1).toDynamicValue(() => new emittery.Typed()).inSingletonScope().when(() => typeof window !== \"undefined\");\n      bind(LinkRewriterService).to(LinkRewriterImpl).inSingletonScope();\n      bind(DomParserService).toConstantValue(new xmldom.DOMParser());\n      bind(XmlSerializerService).toConstantValue(new xmldom.XMLSerializer());\n      bind(LinkFactory).toSelf().inSingletonScope().onActivation(({\n        container\n      }, factory) => {\n        const url = container.get(UrlBuilderService);\n        return factory.register(TYPE_LINK_INTERNAL, url.getSpaUrl.bind(url));\n      });\n      bind(MetaCollectionFactory).toFactory(({\n        container\n      }) => model => {\n        const scope = container.createChild();\n        scope.bind(MetaCollectionImpl).toSelf();\n        scope.bind(MetaCollectionModelToken).toConstantValue(model);\n        return scope.get(MetaCollectionImpl);\n      });\n      bind(MetaFactory).toSelf().inSingletonScope().onActivation((context, factory) => factory.register(TYPE_META_COMMENT, (model, position) => new MetaCommentImpl(model, position)));\n      bind(MenuItemFactory).toFactory(({\n        container\n      }) => model => {\n        const scope = container.createChild();\n        scope.bind(MenuItemImpl).toSelf();\n        scope.bind(MenuItemModelToken).toConstantValue(model);\n        return scope.get(MenuItemImpl);\n      });\n      bind(ImageFactory).toFactory(({\n        container\n      }) => model => {\n        const scope = container.createChild();\n        scope.bind(ImageImpl).toSelf();\n        scope.bind(ImageModelToken).toConstantValue(model);\n        return scope.get(ImageImpl);\n      });\n      bind(ContentFactory).toSelf().inSingletonScope().onActivation(({\n        container\n      }, factory) => factory.register(TYPE_DOCUMENT, model => {\n        const scope = container.createChild();\n        scope.bind(DocumentImpl).toSelf();\n        scope.bind(DocumentModelToken).toConstantValue(model);\n        return scope.get(DocumentImpl);\n      }).register(TYPE_IMAGE_SET, model => {\n        const scope = container.createChild();\n        scope.bind(ImageSetImpl).toSelf();\n        scope.bind(ImageSetModelToken).toConstantValue(model);\n        return scope.get(ImageSetImpl);\n      }).register(TYPE_MENU, model => {\n        const scope = container.createChild();\n        scope.bind(MenuImpl).toSelf();\n        scope.bind(MenuModelToken).toConstantValue(model);\n        return scope.get(MenuImpl);\n      }));\n      bind(ComponentFactory).toSelf().inSingletonScope().onActivation(({\n        container\n      }, factory) => factory.register(TYPE_COMPONENT, (model, children) => {\n        const scope = container.createChild();\n        scope.bind(ComponentImpl).toSelf();\n        scope.bind(ComponentModelToken).toConstantValue(model);\n        scope.bind(ComponentChildrenToken).toConstantValue(children);\n        return scope.get(ComponentImpl);\n      }).register(TYPE_COMPONENT_CONTAINER, (model, children) => {\n        const scope = container.createChild();\n        scope.bind(ContainerImpl).toSelf();\n        scope.bind(ComponentModelToken).toConstantValue(model);\n        scope.bind(ComponentChildrenToken).toConstantValue(children);\n        return scope.get(ContainerImpl);\n      }).register(TYPE_COMPONENT_CONTAINER_ITEM, model => {\n        const scope = container.createChild();\n        scope.bind(ContainerItemImpl).toSelf();\n        scope.bind(ComponentModelToken).toConstantValue(model);\n        return scope.get(ContainerItemImpl);\n      }));\n      bind(PageFactory).toFactory(({\n        container\n      }) => model => {\n        const scope = container.createChild();\n        scope.bind(PageImpl).toSelf();\n        scope.bind(PageModelToken).toConstantValue(model);\n        return scope.get(PageImpl);\n      });\n    });\n  }\n\n  function PageModule$1() {\n    return new inversify.ContainerModule(bind => {\n      bind(EventBusService$1).toDynamicValue(() => new emittery.Typed()).inSingletonScope().when(() => typeof window !== \"undefined\");\n      bind(LinkRewriterService).to(LinkRewriterImpl).inSingletonScope();\n      bind(DomParserService).toConstantValue(new xmldom.DOMParser());\n      bind(XmlSerializerService).toConstantValue(new xmldom.XMLSerializer());\n      bind(LinkFactory).toSelf().inSingletonScope().onActivation(({\n        container\n      }, factory) => {\n        const url = container.get(UrlBuilderService);\n        return factory.register(TYPE_LINK_INTERNAL, url.getSpaUrl.bind(url));\n      });\n      bind(MetaCollectionFactory).toFactory(({\n        container\n      }) => model => {\n        const scope = container.createChild();\n        scope.bind(MetaCollectionImpl).toSelf();\n        scope.bind(MetaCollectionModelToken).toConstantValue(model);\n        return scope.get(MetaCollectionImpl);\n      });\n      bind(MetaFactory).toSelf().inSingletonScope().onActivation((context, factory) => factory.register(TYPE_META_COMMENT, (model, position) => new MetaCommentImpl(model, position)));\n      bind(ContentFactory$1).toFactory(({\n        container\n      }) => model => {\n        const scope = container.createChild();\n        scope.bind(ContentImpl).toSelf();\n        scope.bind(ContentModelToken).toConstantValue(model);\n        return scope.get(ContentImpl);\n      });\n      bind(ComponentFactory$1).toSelf().inSingletonScope().onActivation(({\n        container\n      }, factory) => factory.register(TYPE_COMPONENT$1, (model, children) => {\n        const scope = container.createChild();\n        scope.bind(ComponentImpl$1).toSelf();\n        scope.bind(ComponentModelToken).toConstantValue(model);\n        scope.bind(ComponentChildrenToken).toConstantValue(children);\n        return scope.get(ComponentImpl$1);\n      }).register(TYPE_COMPONENT_CONTAINER$1, (model, children) => {\n        const scope = container.createChild();\n        scope.bind(ContainerImpl$1).toSelf();\n        scope.bind(ComponentModelToken).toConstantValue(model);\n        scope.bind(ComponentChildrenToken).toConstantValue(children);\n        return scope.get(ContainerImpl$1);\n      }).register(TYPE_COMPONENT_CONTAINER_ITEM$1, model => {\n        const scope = container.createChild();\n        scope.bind(ContainerItemImpl$1).toSelf();\n        scope.bind(ComponentModelToken).toConstantValue(model);\n        return scope.get(ContainerItemImpl$1);\n      }));\n      bind(PageFactory).toFactory(({\n        container\n      }) => model => {\n        const scope = container.createChild();\n        scope.bind(PageImpl$1).toSelf();\n        scope.bind(PageModelToken).toConstantValue(model);\n        return scope.get(PageImpl$1);\n      });\n    });\n  }\n  /**\n  * Checks whether a value is a page component.\n  * @param value The value to check.\n  */\n\n\n  function isComponent$2(value) {\n    return isComponent(value) || isComponent$1(value);\n  }\n  /**\n  * Checks whether a value is a page container.\n  * @param value The value to check.\n  */\n\n\n  function isContainer$2(value) {\n    return isContainer(value) || isContainer$1(value);\n  }\n  /**\n  * Checks whether a value is a page container item.\n  * @param value The value to check.\n  */\n\n\n  function isContainerItem$2(value) {\n    return isContainerItem(value) || isContainerItem$1(value);\n  }\n  /**\n  * Checks whether a value is a page.\n  * @param value The value to check.\n  */\n\n\n  function isPage$2(value) {\n    return isPage(value) || isPage$1(value);\n  }\n\n  const SpaService = Symbol.for(\"SpaService\");\n  /**\n  * SPA entry point interacting with the Channel Manager and the Page Model API.\n  */\n\n  let Spa = class Spa {\n    /**\n    * @param eventBus Event bus to exchange data between submodules.\n    * @param api Api client.\n    * @param pageFactory Factory to produce page instances.\n    */\n    constructor(api, pageFactory, cmsEventBus, eventBus) {\n      this.api = api;\n      this.pageFactory = pageFactory;\n      this.cmsEventBus = cmsEventBus;\n      this.eventBus = eventBus;\n      this.onCmsUpdate = this.onCmsUpdate.bind(this);\n    }\n\n    onCmsUpdate(event) {\n      var _a;\n\n      return __awaiter(this, void 0, void 0, function* () {\n        const root = this.page.getComponent();\n        const component = root.getComponentById(event.id);\n        const url = component === null || component === void 0 ? void 0 : component.getUrl();\n\n        if (!url) {\n          return;\n        }\n\n        const model = yield this.api.getComponent(url, event.properties);\n        (_a = this.eventBus) === null || _a === void 0 ? void 0 : _a.emit(\"page.update\", {\n          page: model\n        });\n      });\n    }\n    /**\n    * Initializes the SPA.\n    * @param model A preloaded page model or URL to a page model.\n    */\n\n\n    initialize(model) {\n      if (typeof model === \"string\") {\n        return this.api.getPage(model).then(this.hydrate.bind(this));\n      }\n\n      return this.hydrate(model);\n    }\n\n    hydrate(model) {\n      var _a;\n\n      this.page = this.pageFactory(model);\n\n      if (this.page.isPreview()) {\n        (_a = this.cmsEventBus) === null || _a === void 0 ? void 0 : _a.on(\"cms.update\", this.onCmsUpdate);\n      }\n\n      return this.page;\n    }\n    /**\n    * Destroys the integration with the SPA page.\n    */\n\n\n    destroy() {\n      var _a, _b;\n\n      (_a = this.cmsEventBus) === null || _a === void 0 ? void 0 : _a.off(\"cms.update\", this.onCmsUpdate);\n      (_b = this.eventBus) === null || _b === void 0 ? void 0 : _b.clearListeners();\n      delete this.page;\n    }\n\n  };\n  Spa = __decorate([inversify.injectable(), __param(0, inversify.inject(ApiService)), __param(1, inversify.inject(PageFactory)), __param(2, inversify.inject(EventBusService)), __param(2, inversify.optional()), __param(3, inversify.inject(EventBusService$1)), __param(3, inversify.optional()), __metadata(\"design:paramtypes\", [Object, Function, Object, Object])], Spa);\n\n  function SpaModule() {\n    return new inversify.ContainerModule(bind => {\n      bind(ApiService).to(ApiImpl).inSingletonScope();\n      bind(SpaService).to(Spa).inSingletonScope();\n    });\n  }\n\n  function isConfigurationWithProxy(value) {\n    var _a, _b;\n\n    return !!(((_a = value === null || value === void 0 ? void 0 : value.options) === null || _a === void 0 ? void 0 : _a.live) && ((_b = value === null || value === void 0 ? void 0 : value.options) === null || _b === void 0 ? void 0 : _b.preview));\n  }\n\n  function isConfigurationWithJwt09(value) {\n    return !!(value === null || value === void 0 ? void 0 : value.cmsBaseUrl);\n  }\n\n  const DEFAULT_AUTHORIZATION_PARAMETER = \"token\";\n  const DEFAULT_SERVER_ID_PARAMETER = \"server-id\";\n  const container = new inversify.Container({\n    skipBaseClassChecks: true\n  });\n  const pages = new WeakMap();\n  container.load(CmsModule(), UrlModule());\n\n  function onReady(value, callback) {\n    const wrapper = result => (callback(result), result);\n\n    return value instanceof Promise ? value.then(wrapper) : wrapper(value);\n  }\n\n  function initializeWithProxy(scope, configuration, model) {\n    const options = isMatched(configuration.request.path, configuration.options.preview.spaBaseUrl) ? configuration.options.preview : configuration.options.live;\n    scope.load(PageModule$1(), SpaModule(), UrlModule$1());\n    scope.bind(ApiOptionsToken).toConstantValue(configuration);\n    scope.bind(UrlBuilderOptionsToken).toConstantValue(options);\n    scope.getNamed(CmsService, \"cms14\").initialize(configuration);\n    return onReady(scope.get(SpaService).initialize(model !== null && model !== void 0 ? model : configuration.request.path), () => {\n      scope.unbind(ApiOptionsToken);\n      scope.unbind(UrlBuilderOptionsToken);\n    });\n  }\n\n  function initializeWithJwt09(scope, configuration, model) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n\n    const authorizationParameter = (_a = configuration.authorizationQueryParameter) !== null && _a !== void 0 ? _a : DEFAULT_AUTHORIZATION_PARAMETER;\n    const serverIdParameter = (_b = configuration.serverIdQueryParameter) !== null && _b !== void 0 ? _b : DEFAULT_SERVER_ID_PARAMETER;\n    const {\n      url: path,\n      searchParams\n    } = extractSearchParams(configuration.request.path, [authorizationParameter, serverIdParameter].filter(Boolean));\n    const authorizationToken = (_c = searchParams.get(authorizationParameter)) !== null && _c !== void 0 ? _c : undefined;\n    const serverId = (_d = searchParams.get(serverIdParameter)) !== null && _d !== void 0 ? _d : undefined;\n\n    const config = _extends(_extends({}, configuration), {\n      origin: (_e = configuration.origin) !== null && _e !== void 0 ? _e : parseUrl((_g = (_f = configuration.apiBaseUrl) !== null && _f !== void 0 ? _f : configuration.cmsBaseUrl) !== null && _g !== void 0 ? _g : \"\").origin,\n      spaBaseUrl: appendSearchParams((_h = configuration.spaBaseUrl) !== null && _h !== void 0 ? _h : \"\", searchParams)\n    });\n\n    scope.load(PageModule$1(), SpaModule(), UrlModule$1());\n    scope.bind(ApiOptionsToken).toConstantValue(_extends({\n      authorizationToken,\n      serverId\n    }, config));\n    scope.bind(UrlBuilderOptionsToken).toConstantValue(config);\n    return onReady(scope.get(SpaService).initialize(model !== null && model !== void 0 ? model : path), page => {\n      if (page.isPreview() && config.cmsBaseUrl) {\n        scope.get(PostMessageService).initialize(config);\n        scope.get(CmsService).initialize(config);\n      }\n\n      scope.unbind(ApiOptionsToken);\n      scope.unbind(UrlBuilderOptionsToken);\n    });\n  }\n\n  function initializeWithJwt10(scope, configuration, model) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n\n    const authorizationParameter = (_a = configuration.authorizationQueryParameter) !== null && _a !== void 0 ? _a : DEFAULT_AUTHORIZATION_PARAMETER;\n    const endpointParameter = (_b = configuration.endpointQueryParameter) !== null && _b !== void 0 ? _b : \"\";\n    const serverIdParameter = (_c = configuration.serverIdQueryParameter) !== null && _c !== void 0 ? _c : DEFAULT_SERVER_ID_PARAMETER;\n    const {\n      url: path,\n      searchParams\n    } = extractSearchParams(configuration.request.path, [authorizationParameter, serverIdParameter, endpointParameter].filter(Boolean));\n    const authorizationToken = (_d = searchParams.get(authorizationParameter)) !== null && _d !== void 0 ? _d : undefined;\n    const endpoint = (_e = searchParams.get(endpointParameter)) !== null && _e !== void 0 ? _e : undefined;\n    const serverId = (_f = searchParams.get(serverIdParameter)) !== null && _f !== void 0 ? _f : undefined;\n\n    const config = _extends(_extends({}, configuration), {\n      apiVersion: \"1.0\",\n      endpoint: (_g = configuration.endpoint) !== null && _g !== void 0 ? _g : endpoint,\n      baseUrl: appendSearchParams((_h = configuration.baseUrl) !== null && _h !== void 0 ? _h : \"\", searchParams),\n      origin: (_j = configuration.origin) !== null && _j !== void 0 ? _j : parseUrl((_l = (_k = configuration.endpoint) !== null && _k !== void 0 ? _k : endpoint) !== null && _l !== void 0 ? _l : \"\").origin\n    });\n\n    scope.load(PageModule(), SpaModule(), UrlModule());\n    scope.bind(ApiOptionsToken).toConstantValue(_extends({\n      authorizationToken,\n      serverId\n    }, config));\n    scope.bind(UrlBuilderOptionsToken).toConstantValue(config);\n    return onReady(scope.get(SpaService).initialize(model !== null && model !== void 0 ? model : path), page => {\n      if (page.isPreview() && config.endpoint) {\n        scope.get(PostMessageService).initialize(config);\n        scope.get(CmsService).initialize(config);\n      }\n\n      scope.unbind(ApiOptionsToken);\n      scope.unbind(UrlBuilderOptionsToken);\n    });\n  }\n\n  function initialize(configuration, model) {\n    if (isPage$2(model)) {\n      return model;\n    }\n\n    const scope = container.createChild();\n    return onReady(isConfigurationWithProxy(configuration) ? initializeWithProxy(scope, configuration, model) : isConfigurationWithJwt09(configuration) ? initializeWithJwt09(scope, configuration, model) : initializeWithJwt10(scope, configuration, model), page => pages.set(page, scope));\n  }\n  /**\n  * Destroys the integration with the SPA page.\n  * @param page Page instance to destroy.\n  */\n\n\n  function destroy(page) {\n    const scope = pages.get(page);\n    pages.delete(page);\n    return scope === null || scope === void 0 ? void 0 : scope.get(SpaService).destroy();\n  }\n\n  exports.META_POSITION_BEGIN = META_POSITION_BEGIN;\n  exports.META_POSITION_END = META_POSITION_END;\n  exports.TYPE_CONTAINER_BOX = TYPE_CONTAINER_BOX;\n  exports.TYPE_CONTAINER_INLINE = TYPE_CONTAINER_INLINE;\n  exports.TYPE_CONTAINER_NO_MARKUP = TYPE_CONTAINER_NO_MARKUP;\n  exports.TYPE_CONTAINER_ORDERED_LIST = TYPE_CONTAINER_ORDERED_LIST;\n  exports.TYPE_CONTAINER_UNORDERED_LIST = TYPE_CONTAINER_UNORDERED_LIST;\n  exports.TYPE_LINK_EXTERNAL = TYPE_LINK_EXTERNAL;\n  exports.TYPE_LINK_INTERNAL = TYPE_LINK_INTERNAL;\n  exports.TYPE_LINK_RESOURCE = TYPE_LINK_RESOURCE;\n  exports.destroy = destroy;\n  exports.initialize = initialize;\n  exports.isComponent = isComponent$2;\n  exports.isContainer = isContainer$2;\n  exports.isContainerItem = isContainerItem$2;\n  exports.isContent = isContent;\n  exports.isDocument = isDocument;\n  exports.isImageSet = isImageSet;\n  exports.isLink = isLink;\n  exports.isMenu = isMenu;\n  exports.isMeta = isMeta;\n  exports.isMetaComment = isMetaComment;\n  exports.isPage = isPage$2;\n  exports.isReference = isReference;\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n});","map":{"version":3,"sources":["../src/url/utils.ts","../src/url/builder.ts","../src/url/module.ts","../src/url/builder09.ts","../src/url/module09.ts","../src/spa/api.ts","../src/cms/events.ts","../src/emitter.ts","../src/cms/rpc.ts","../src/cms/cms.ts","../src/cms/cms14.ts","../src/cms/post-message.ts","../src/cms/index.ts","../src/page/link.ts","../src/page/factory.ts","../src/page/link-factory.ts","../src/page/meta-collection-factory.ts","../src/page/component.ts","../src/page/component09.ts","../src/page/container.ts","../src/page/container09.ts","../src/page/events.ts","../src/page/reference.ts","../src/page/container-item.ts","../src/page/container-item09.ts","../src/page/component-factory.ts","../src/page/content-factory.ts","../src/page/link-rewriter.ts","../src/page/page.ts","../src/page/component-factory09.ts","../src/page/content-factory09.ts","../src/page/page09.ts","../src/page/content09.ts","../src/page/document.ts","../src/page/image.ts","../src/page/image-set.ts","../src/page/menu-item.ts","../src/page/menu.ts","../src/page/meta.ts","../src/page/meta-comment.ts","../src/page/page-factory.ts","../src/page/meta-factory.ts","../src/page/meta-collection.ts","../src/page/module.ts","../src/page/module09.ts","../src/page/index.ts","../src/spa/spa.ts","../src/spa/index.ts","../src/configuration.ts","../src/index.ts"],"names":["appendSearchParams","url","params","hash","parseUrl","buildUrl","origin","pathname","searchParams","mergeSearchParams","toString","search","path","extractSearchParams","extracted","URLSearchParams","forEach","param","has","set","get","delete","isAbsoluteUrl","startsWith","isMatchedOrigin","baseOrigin","schema","host","split","baseSchema","baseHost","isMatchedPathname","basePathname","isMatchedQuery","baseSearch","match","value","key","getAll","includes","isMatched","link","base","linkUrl","baseUrl","rest","result","parsedUrl","URL","substring","length","endsWith","resolveUrl","sourceUrl","UrlBuilderOptionsToken","Symbol","for","UrlBuilderService","injectable","UrlBuilderImpl","constructor","__param","options","endpoint","getApiUrl","this","Error","route","getSpaUrl","UrlModule","ContainerModule","bind","to","inSingletonScope","DEFAULT_API_BASE_URL","DEFAULT_SPA_BASE_URL","apiBaseUrl","cmsBaseUrl","spaBaseUrl","DEFAULT_API_VERSION_HEADER","DEFAULT_AUTHORIZATION_HEADER","DEFAULT_SERVER_ID_HEADER","ApiOptionsToken","ApiService","ApiImpl","remoteAddress","ip","request","connection","_a","headers","apiVersionHeader","apiVersion","authorizationToken","authorizationHeader","serverId","serverIdHeader","visitor","header","id","urlBuilder","ApiImpl_1","getHeaders","httpClient","getPage","send","method","getComponent","payload","data","config","response","EventBusService","EmitterMixin","Super","Typed","emitter","on","off","emit","RpcClientService","RpcServerService","TYPE_EVENT","TYPE_RESPONSE","TYPE_REQUEST","STATE_FULFILLED","STATE_REJECTED","Dummy","Rpc","Map","generateId","Math","random","slice","calls","call","command","Promise","resolve","reject","type","register","callback","callbacks","trigger","event","process","message","processEvent","processResponse","processRequest","state","CmsService","GLOBAL_WINDOW","window","undefined","CmsImpl","rpcClient","rpcServer","eventBus","onStateChange","onPageReady","onUpdate","inject","initialize","document","readyState","onInitialize","addEventListener","removeEventListener","resource","script","createElement","src","body","appendChild","Cms14Impl","flush","postponed","splice","task","postpone","args","api","apply","push","SPA","sync","init","onInit","renderComponent","onRenderComponent","properties","PostMessageService","PostMessage","onMessage","parent","postMessage","CmsModule","toDynamicValue","when","toService","whenTargetIsDefault","whenTargetNamed","TYPE_LINK_EXTERNAL","TYPE_LINK_INTERNAL","TYPE_LINK_RESOURCE","TYPE_LINK_UNKNOWN","isLink","Object","prototype","hasOwnProperty","SimpleFactory","builder","mapping","LinkFactory","create","createLink","createPath","href","MetaCollectionFactory","ComponentChildrenToken","ComponentModelToken","TYPE_COMPONENT","TYPE_COMPONENT_CONTAINER_ITEM","TYPE_COMPONENT_CONTAINER","ComponentImpl","model","children","linkFactory","metaFactory","meta","getId","getMeta","getModels","models","getUrl","links","self","getName","name","getParameters","getChildren","componentNames","component","shift","find","getComponentById","queue","isComponent","_meta","_links","componentRendering","TYPE_CONTAINER_BOX","TYPE_CONTAINER_UNORDERED_LIST","TYPE_CONTAINER_ORDERED_LIST","TYPE_CONTAINER_INLINE","TYPE_CONTAINER_NO_MARKUP","ContainerImpl","getType","xtype","toLowerCase","isContainer","isReference","$ref","object","reference","reduce","PARAMETER_HIDDEN","ContainerItemImpl","onPageUpdate","page","root","label","isHidden","paramsInfo","isContainerItem","ComponentFactory","heap","pool","i","reverse","previous","map","child","buildComponent","ContentFactory","DomParserService","LinkRewriterService","XmlSerializerService","BODY_CONTENTS","LinkRewriterImpl","domParser","DOMParser","xmlSerializer","XMLSerializer","rewrite","content","parseFromString","rewriteAnchors","rewriteImages","serializeToString","replace","Array","from","getElementsByTagName","filter","element","hasAttribute","getAttribute","setAttribute","PageModelToken","PageImpl","WeakMap","componentFactory","contentFactory","linkRewriter","CmsEventBusService","cmsEventBus","getContent","getDocument","getTitle","pageTitle","site","getVersion","version","getVisitor","getVisit","visit","isPreview","preview","rewriteLinks","toJSON","isPage","head","components","unshift","siblings","entries","alias","contentReference","PageImpl_1","getContentReference","ContentModelToken","ContentImpl","getLocale","localeString","getData","isContent","DocumentModelToken","TYPE_DOCUMENT","DocumentImpl","isDocument","ImageFactory","ImageModelToken","ImageImpl","getDisplayName","displayName","getFileName","fileName","getHeight","height","getMimeType","mimeType","getSize","size","getWidth","width","ImageSetModelToken","TYPE_IMAGE_SET","ImageSetImpl","imageFactory","original","thumbnail","getDescription","description","getOriginal","getThumbnail","isImageSet","MenuItemFactory","MenuItemModelToken","MenuItemImpl","menuItemFactory","childMenuItems","getDepth","depth","getLink","parameters","isExpanded","expanded","isRepositoryBased","repositoryBased","isSelected","selected","MenuModelToken","TYPE_MENU","MenuImpl","items","siteMenuItems","selectSiteMenuItem","getItems","getSelected","isMenu","TYPE_META_COMMENT","META_POSITION_BEGIN","META_POSITION_END","MetaImpl","position","getPosition","isMeta","HTML_COMMENT","MetaCommentImpl","super","isMetaComment","PageFactory","MetaFactory","MetaCollectionModelToken","MetaCollectionImpl","beginNodeSpan","endNodeSpan","MetaCollectionImpl_1","setPrototypeOf","freeze","clear","comments","comment","remove","render","tail","ownerDocument","createComment","parentNode","insertBefore","nextSibling","PageModule","toConstantValue","toSelf","onActivation","container","factory","toFactory","scope","createChild","context","isComponent10","isComponent09","isContainer10","isContainer09","isContainerItem10","isContainerItem09","isPage10","isPage09","SpaService","Spa","pageFactory","onCmsUpdate","then","hydrate","destroy","clearListeners","SpaModule","isConfigurationWithProxy","live","isConfigurationWithJwt09","DEFAULT_AUTHORIZATION_PARAMETER","DEFAULT_SERVER_ID_PARAMETER","Container","skipBaseClassChecks","pages","load","onReady","wrapper","initializeWithProxy","configuration","PageModule09","UrlModule09","getNamed","unbind","initializeWithJwt09","authorizationParameter","authorizationQueryParameter","serverIdParameter","serverIdQueryParameter","Boolean","initializeWithJwt10","endpointParameter","endpointQueryParameter"],"mappings":"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","sourcesContent":["(function(global, factory) {\n    typeof exports === \"object\" && typeof module !== \"undefined\" ? factory(exports, require(\"reflect-metadata\"), require(\"inversify\"), require(\"emittery\"), require(\"xmldom\")) : typeof define === \"function\" && define.amd ? define([ \"exports\", \"reflect-metadata\", \"inversify\", \"emittery\", \"xmldom\" ], factory) : (global = typeof globalThis !== \"undefined\" ? globalThis : global || self, \n    factory(global.BloomreachSpaSdk = {}, null, global.inversify, global.emittery, global.xmldom));\n})(this, (function(exports, reflectMetadata, inversify, emittery, xmldom) {\n    \"use strict\";\n    function _extends() {\n        _extends = Object.assign || function(target) {\n            for (var i = 1; i < arguments.length; i++) {\n                var source = arguments[i];\n                for (var key in source) {\n                    if (Object.prototype.hasOwnProperty.call(source, key)) {\n                        target[key] = source[key];\n                    }\n                }\n            }\n            return target;\n        };\n        return _extends.apply(this, arguments);\n    }\n    function __rest(s, e) {\n        var t = {};\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n        }\n        return t;\n    }\n    function __decorate(decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    }\n    function __param(paramIndex, decorator) {\n        return function(target, key) {\n            decorator(target, key, paramIndex);\n        };\n    }\n    function __metadata(metadataKey, metadataValue) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n    }\n    function __awaiter(thisArg, _arguments, P, generator) {\n        function adopt(value) {\n            return value instanceof P ? value : new P((function(resolve) {\n                resolve(value);\n            }));\n        }\n        return new (P || (P = Promise))((function(resolve, reject) {\n            function fulfilled(value) {\n                try {\n                    step(generator.next(value));\n                } catch (e) {\n                    reject(e);\n                }\n            }\n            function rejected(value) {\n                try {\n                    step(generator[\"throw\"](value));\n                } catch (e) {\n                    reject(e);\n                }\n            }\n            function step(result) {\n                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n            }\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n        }));\n    }\n    function appendSearchParams(url, params) {\n        const {hash, origin, pathname, searchParams} = parseUrl(url);\n        return buildUrl({\n            hash,\n            origin,\n            pathname,\n            searchParams: mergeSearchParams(searchParams, params)\n        });\n    }\n    function buildUrl(url) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const searchParams = (_b = (_a = url.searchParams) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : \"\";\n        const search = (_c = url.search) !== null && _c !== void 0 ? _c : `${searchParams && `?${searchParams}`}`;\n        const path = (_d = url.path) !== null && _d !== void 0 ? _d : `${(_e = url.pathname) !== null && _e !== void 0 ? _e : \"\"}${search}${(_f = url.hash) !== null && _f !== void 0 ? _f : \"\"}`;\n        return `${(_g = url.origin) !== null && _g !== void 0 ? _g : \"\"}${path}`;\n    }\n    function extractSearchParams(url, params) {\n        const {hash, origin, pathname, searchParams} = parseUrl(url);\n        const extracted = new URLSearchParams;\n        params.forEach(param => {\n            if (searchParams.has(param)) {\n                extracted.set(param, searchParams.get(param));\n                searchParams.delete(param);\n            }\n        });\n        return {\n            searchParams: extracted,\n            url: buildUrl({\n                hash,\n                origin,\n                pathname,\n                searchParams\n            })\n        };\n    }\n    function isAbsoluteUrl(url) {\n        const {origin, pathname} = parseUrl(url);\n        return !!origin || pathname.startsWith(\"/\");\n    }\n    function isMatchedOrigin(origin, baseOrigin) {\n        const [schema, host = \"\"] = origin.split(\"//\", 2);\n        const [baseSchema, baseHost = \"\"] = baseOrigin.split(\"//\", 2);\n        return !baseOrigin || !origin || (!schema || !baseSchema || schema === baseSchema) && baseHost === host;\n    }\n    function isMatchedPathname(pathname, basePathname) {\n        return !basePathname || pathname.startsWith(basePathname);\n    }\n    function isMatchedQuery(search, baseSearch) {\n        let match = true;\n        baseSearch.forEach((value, key) => {\n            match = match && (!value && search.has(key) || search.getAll(key).includes(value));\n        });\n        return match;\n    }\n    function isMatched(link, base = \"\") {\n        const linkUrl = parseUrl(link);\n        const baseUrl = parseUrl(base);\n        return isMatchedOrigin(linkUrl.origin, baseUrl.origin) && isMatchedPathname(linkUrl.pathname, baseUrl.pathname) && isMatchedQuery(linkUrl.searchParams, baseUrl.searchParams);\n    }\n    function mergeSearchParams(params, ...rest) {\n        const result = new URLSearchParams(params);\n        rest.forEach(params => params.forEach((value, key) => result.set(key, value)));\n        return result;\n    }\n    function parseUrl(url) {\n        const parsedUrl = url ? new URL(url, \"http://example.com\") : {};\n        const {hash = \"\", search = \"\", searchParams = new URLSearchParams} = parsedUrl;\n        let origin = url.substring(0, url.length - search.length - hash.length);\n        let {pathname = \"\"} = parsedUrl;\n        if (!origin.endsWith(pathname)) {\n            pathname = pathname.substring(1);\n        }\n        origin = origin.substring(0, origin.length - pathname.length);\n        return {\n            hash,\n            origin,\n            pathname,\n            search,\n            searchParams,\n            path: `${pathname}${search}${hash}`\n        };\n    }\n    function resolveUrl(url, base) {\n        const baseUrl = parseUrl(base);\n        const sourceUrl = parseUrl(url);\n        const pathname = sourceUrl.pathname.startsWith(\"/\") ? sourceUrl.pathname : `${baseUrl.pathname}${baseUrl.pathname.endsWith(\"/\") || !sourceUrl.pathname ? \"\" : \"/\"}${sourceUrl.pathname}`;\n        return buildUrl({\n            pathname,\n            hash: sourceUrl.hash || baseUrl.hash,\n            origin: sourceUrl.origin || baseUrl.origin,\n            searchParams: mergeSearchParams(baseUrl.searchParams, sourceUrl.searchParams)\n        });\n    }\n    const UrlBuilderOptionsToken = Symbol.for(\"UrlBuilderOptionsToken\");\n    const UrlBuilderService = Symbol.for(\"UrlBuilderService\");\n    let UrlBuilderImpl = class UrlBuilderImpl {\n        constructor(options) {\n            var _a, _b;\n            this.endpoint = parseUrl((_a = options.endpoint) !== null && _a !== void 0 ? _a : \"\");\n            this.baseUrl = parseUrl((_b = options.baseUrl) !== null && _b !== void 0 ? _b : \"\");\n        }\n        getApiUrl(link) {\n            const {pathname, searchParams} = parseUrl(link);\n            if (this.baseUrl.pathname && !pathname.startsWith(this.baseUrl.pathname)) {\n                throw new Error(`The path \"${pathname}\" does not start with the base path \"${this.baseUrl.pathname}\".`);\n            }\n            const route = pathname.substring(this.baseUrl.pathname.length);\n            return buildUrl({\n                origin: this.endpoint.origin,\n                pathname: `${this.endpoint.pathname}${route}`,\n                searchParams: mergeSearchParams(searchParams, this.endpoint.searchParams)\n            });\n        }\n        getSpaUrl(link) {\n            const {hash, pathname, searchParams} = parseUrl(link);\n            const route = !pathname.startsWith(\"/\") && !this.baseUrl.pathname ? `/${pathname}` : pathname;\n            return buildUrl({\n                origin: this.baseUrl.origin,\n                pathname: `${this.baseUrl.pathname}${route}`,\n                searchParams: mergeSearchParams(searchParams, this.baseUrl.searchParams),\n                hash: hash || this.baseUrl.hash\n            });\n        }\n    };\n    UrlBuilderImpl = __decorate([ inversify.injectable(), __param(0, inversify.inject(UrlBuilderOptionsToken)), __metadata(\"design:paramtypes\", [ Object ]) ], UrlBuilderImpl);\n    function UrlModule() {\n        return new inversify.ContainerModule(bind => {\n            bind(UrlBuilderService).to(UrlBuilderImpl).inSingletonScope();\n        });\n    }\n    const DEFAULT_API_BASE_URL = \"/resourceapi\";\n    const DEFAULT_SPA_BASE_URL = \"\";\n    let UrlBuilderImpl$1 = class UrlBuilderImpl {\n        constructor(options) {\n            var _a, _b, _c, _d;\n            this.apiBaseUrl = parseUrl((_a = options.apiBaseUrl) !== null && _a !== void 0 ? _a : `${(_b = options.cmsBaseUrl) !== null && _b !== void 0 ? _b : \"\"}${DEFAULT_API_BASE_URL}`);\n            this.cmsBaseUrl = parseUrl((_c = options.cmsBaseUrl) !== null && _c !== void 0 ? _c : \"\");\n            this.spaBaseUrl = parseUrl((_d = options.spaBaseUrl) !== null && _d !== void 0 ? _d : DEFAULT_SPA_BASE_URL);\n        }\n        getApiUrl(link) {\n            const {pathname, searchParams} = parseUrl(link);\n            if (this.apiBaseUrl.pathname && pathname.startsWith(this.apiBaseUrl.pathname)) {\n                return buildUrl({\n                    pathname,\n                    origin: this.apiBaseUrl.origin,\n                    searchParams: mergeSearchParams(this.apiBaseUrl.searchParams, searchParams)\n                });\n            }\n            if (this.spaBaseUrl.pathname && !pathname.startsWith(this.spaBaseUrl.pathname)) {\n                throw new Error(`The path \"${pathname}\" does not start with the base path \"${this.spaBaseUrl.pathname}\".`);\n            }\n            const route = pathname.substring(this.spaBaseUrl.pathname.length);\n            return buildUrl({\n                origin: this.apiBaseUrl.origin,\n                pathname: `${this.apiBaseUrl.pathname}${route}`,\n                searchParams: mergeSearchParams(searchParams, this.apiBaseUrl.searchParams)\n            });\n        }\n        getSpaUrl(link) {\n            const {hash, pathname, searchParams} = parseUrl(link);\n            let route = pathname.startsWith(this.cmsBaseUrl.pathname) ? pathname.substring(this.cmsBaseUrl.pathname.length) : pathname;\n            if (!route.startsWith(\"/\") && !this.spaBaseUrl.pathname) {\n                route = `/${route}`;\n            }\n            return buildUrl({\n                origin: this.spaBaseUrl.origin,\n                pathname: `${this.spaBaseUrl.pathname}${route}`,\n                searchParams: mergeSearchParams(searchParams, this.spaBaseUrl.searchParams),\n                hash: hash || this.spaBaseUrl.hash\n            });\n        }\n    };\n    UrlBuilderImpl$1 = __decorate([ inversify.injectable(), __param(0, inversify.inject(UrlBuilderOptionsToken)), __metadata(\"design:paramtypes\", [ Object ]) ], UrlBuilderImpl$1);\n    function UrlModule$1() {\n        return new inversify.ContainerModule(bind => {\n            bind(UrlBuilderService).to(UrlBuilderImpl$1).inSingletonScope();\n        });\n    }\n    var ApiImpl_1;\n    const DEFAULT_API_VERSION_HEADER = \"Accept-Version\";\n    const DEFAULT_AUTHORIZATION_HEADER = \"Authorization\";\n    const DEFAULT_SERVER_ID_HEADER = \"Server-Id\";\n    const ApiOptionsToken = Symbol.for(\"ApiOptionsToken\");\n    const ApiService = Symbol.for(\"ApiService\");\n    let ApiImpl = ApiImpl_1 = class ApiImpl {\n        constructor(urlBuilder, options) {\n            this.urlBuilder = urlBuilder;\n            this.headers = ApiImpl_1.getHeaders(options);\n            this.httpClient = options.httpClient;\n        }\n        static getHeaders(options) {\n            const {remoteAddress: ip} = options.request.connection || {};\n            const _a = options.request.headers || {}, headers = __rest(_a, [ \"host\" ]);\n            const {apiVersionHeader = DEFAULT_API_VERSION_HEADER, apiVersion, authorizationHeader = DEFAULT_AUTHORIZATION_HEADER, authorizationToken, serverIdHeader = DEFAULT_SERVER_ID_HEADER, serverId, visitor} = options;\n            return _extends(_extends(_extends(_extends(_extends(_extends({}, ip && {\n                \"x-forwarded-for\": ip\n            }), apiVersion && {\n                [apiVersionHeader]: apiVersion\n            }), authorizationToken && {\n                [authorizationHeader]: `Bearer ${authorizationToken}`\n            }), serverId && {\n                [serverIdHeader]: serverId\n            }), visitor && {\n                [visitor.header]: visitor.id\n            }), headers);\n        }\n        getPage(path) {\n            const url = this.urlBuilder.getApiUrl(path);\n            return this.send({\n                url,\n                method: \"GET\"\n            });\n        }\n        getComponent(url, payload) {\n            const data = new URLSearchParams(payload);\n            return this.send({\n                url,\n                data: data.toString(),\n                headers: {\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\n                },\n                method: \"POST\"\n            });\n        }\n        send(config) {\n            return __awaiter(this, void 0, void 0, (function*() {\n                const response = yield this.httpClient(_extends(_extends({}, config), {\n                    headers: _extends(_extends({}, this.headers), config.headers)\n                }));\n                return response.data;\n            }));\n        }\n    };\n    ApiImpl = ApiImpl_1 = __decorate([ inversify.injectable(), __param(0, inversify.inject(UrlBuilderService)), __param(1, inversify.inject(ApiOptionsToken)), __metadata(\"design:paramtypes\", [ Object, Object ]) ], ApiImpl);\n    const EventBusService = Symbol(\"EventBusService\");\n    function EmitterMixin(Super) {\n        return class EmitterMixin extends Super {\n            constructor() {\n                super(...arguments);\n                /**\n         * @todo should be private\n         * @see https://github.com/Microsoft/TypeScript/issues/17293\n         */                this.emitter = new emittery.Typed;\n                this.on = this.emitter.on.bind(this.emitter);\n                this.off = this.emitter.off.bind(this.emitter);\n                /**\n         * @todo should be private\n         * @see https://github.com/Microsoft/TypeScript/issues/17293\n         */                this.emit = this.emitter.emit.bind(this.emitter);\n            }\n        };\n    }\n    const RpcClientService = Symbol.for(\"RpcClientService\");\n    const RpcServerService = Symbol.for(\"RpcServerService\");\n    const TYPE_EVENT = \"brxm:event\";\n    const TYPE_RESPONSE = \"brxm:response\";\n    const TYPE_REQUEST = \"brxm:request\";\n    const STATE_FULFILLED = \"fulfilled\";\n    const STATE_REJECTED = \"rejected\";\n    class Dummy {}\n    class Rpc extends(EmitterMixin(Dummy)){\n        constructor() {\n            super(...arguments);\n            this.calls = new Map;\n            this.callbacks = new Map;\n        }\n        generateId() {\n            let id;\n            do {\n                id = `${Math.random()}`.slice(2);\n            } while (this.calls.has(id));\n            return id;\n        }\n        call(command, ...payload) {\n            return new Promise((resolve, reject) => {\n                const id = this.generateId();\n                this.calls.set(id, [ resolve, reject ]);\n                this.send({\n                    id,\n                    command,\n                    payload,\n                    type: TYPE_REQUEST\n                });\n            });\n        }\n        register(command, callback) {\n            this.callbacks.set(command, callback);\n        }\n        trigger(event, payload) {\n            this.send({\n                event,\n                payload,\n                type: TYPE_EVENT\n            });\n        }\n        process(message) {\n            switch (message === null || message === void 0 ? void 0 : message.type) {\n              case TYPE_EVENT:\n                this.processEvent(message);\n                break;\n\n              case TYPE_RESPONSE:\n                this.processResponse(message);\n                break;\n\n              case TYPE_REQUEST:\n                this.processRequest(message);\n                break;\n            }\n        }\n        processEvent(event) {\n            this.emit(event.event, event.payload);\n        }\n        processResponse(response) {\n            if (!this.calls.has(response.id)) {\n                return;\n            }\n            const [resolve, reject] = this.calls.get(response.id);\n            this.calls.delete(response.id);\n            if (response.state === STATE_REJECTED) {\n                return void reject(response.result);\n            }\n            resolve(response.result);\n        }\n        processRequest(request) {\n            return __awaiter(this, void 0, void 0, (function*() {\n                const callback = this.callbacks.get(request.command);\n                if (!callback) {\n                    return;\n                }\n                try {\n                    return this.send({\n                        type: TYPE_RESPONSE,\n                        id: request.id,\n                        state: STATE_FULFILLED,\n                        result: yield callback(...request.payload)\n                    });\n                } catch (result) {\n                    return this.send({\n                        result,\n                        type: TYPE_RESPONSE,\n                        id: request.id,\n                        state: STATE_REJECTED\n                    });\n                }\n            }));\n        }\n    }\n    const CmsService = Symbol.for(\"CmsService\");\n    const GLOBAL_WINDOW = typeof window === \"undefined\" ? undefined : window;\n    let CmsImpl = class CmsImpl {\n        constructor(rpcClient, rpcServer, eventBus) {\n            var _a;\n            this.rpcClient = rpcClient;\n            this.rpcServer = rpcServer;\n            this.eventBus = eventBus;\n            this.onStateChange = this.onStateChange.bind(this);\n            (_a = this.eventBus) === null || _a === void 0 ? void 0 : _a.on(\"page.ready\", this.onPageReady.bind(this));\n            this.rpcClient.on(\"update\", this.onUpdate.bind(this));\n            this.rpcServer.register(\"inject\", this.inject.bind(this));\n        }\n        initialize({window = GLOBAL_WINDOW}) {\n            var _a, _b, _c, _d;\n            if (this.window === window) {\n                return;\n            }\n            this.window = window;\n            if (((_b = (_a = this.window) === null || _a === void 0 ? void 0 : _a.document) === null || _b === void 0 ? void 0 : _b.readyState) !== \"loading\") {\n                return this.onInitialize();\n            }\n            (_d = (_c = this.window) === null || _c === void 0 ? void 0 : _c.document) === null || _d === void 0 ? void 0 : _d.addEventListener(\"readystatechange\", this.onStateChange);\n        }\n        onInitialize() {\n            this.rpcServer.trigger(\"ready\", undefined);\n        }\n        onStateChange() {\n            if (this.window.document.readyState === \"loading\") {\n                return;\n            }\n            this.onInitialize();\n            this.window.document.removeEventListener(\"readystatechange\", this.onStateChange);\n        }\n        onPageReady() {\n            this.rpcClient.call(\"sync\");\n        }\n        onUpdate(event) {\n            var _a;\n            (_a = this.eventBus) === null || _a === void 0 ? void 0 : _a.emit(\"cms.update\", event);\n        }\n        inject(resource) {\n            var _a;\n            if (!((_a = this.window) === null || _a === void 0 ? void 0 : _a.document)) {\n                return Promise.reject(new Error(\"SPA document is not ready.\"));\n            }\n            return new Promise((resolve, reject) => {\n                const script = this.window.document.createElement(\"script\");\n                script.type = \"text/javascript\";\n                script.src = resource;\n                script.addEventListener(\"load\", () => resolve());\n                script.addEventListener(\"error\", () => reject(new Error(`Failed to load resource '${resource}'.`)));\n                this.window.document.body.appendChild(script);\n            });\n        }\n    };\n    CmsImpl = __decorate([ inversify.injectable(), __param(0, inversify.inject(RpcClientService)), __param(1, inversify.inject(RpcServerService)), __param(2, inversify.inject(EventBusService)), __param(2, inversify.optional()), __metadata(\"design:paramtypes\", [ Object, Object, Object ]) ], CmsImpl);\n    const GLOBAL_WINDOW$1 = typeof window === \"undefined\" ? undefined : window;\n    let Cms14Impl = class Cms14Impl {\n        constructor(eventBus) {\n            this.eventBus = eventBus;\n            this.postponed = [];\n        }\n        flush() {\n            return __awaiter(this, void 0, void 0, (function*() {\n                this.postponed.splice(0).forEach(task => task());\n            }));\n        }\n        postpone(task) {\n            return (...args) => {\n                if (this.api) {\n                    return task.apply(this, args);\n                }\n                this.postponed.push(task.bind(this, ...args));\n            };\n        }\n        initialize({window = GLOBAL_WINDOW$1}) {\n            var _a;\n            if (this.api || !window || window.SPA) {\n                return;\n            }\n            (_a = this.eventBus) === null || _a === void 0 ? void 0 : _a.on(\"page.ready\", this.postpone(this.sync));\n            window.SPA = {\n                init: this.onInit.bind(this),\n                renderComponent: this.onRenderComponent.bind(this)\n            };\n        }\n        onInit(api) {\n            this.api = api;\n            this.flush();\n        }\n        onRenderComponent(id, properties) {\n            var _a;\n            (_a = this.eventBus) === null || _a === void 0 ? void 0 : _a.emit(\"cms.update\", {\n                id,\n                properties\n            });\n        }\n        sync() {\n            this.api.sync();\n        }\n    };\n    Cms14Impl = __decorate([ inversify.injectable(), __param(0, inversify.inject(EventBusService)), __param(0, inversify.optional()), __metadata(\"design:paramtypes\", [ Object ]) ], Cms14Impl);\n    const PostMessageService = Symbol.for(\"PostMessageService\");\n    const GLOBAL_WINDOW$2 = typeof window === \"undefined\" ? undefined : window;\n    let PostMessage = class PostMessage extends Rpc {\n        constructor() {\n            super();\n            this.onMessage = this.onMessage.bind(this);\n        }\n        initialize({origin, window = GLOBAL_WINDOW$2}) {\n            var _a, _b;\n            (_a = this.window) === null || _a === void 0 ? void 0 : _a.removeEventListener(\"message\", this.onMessage, false);\n            this.origin = origin;\n            this.window = window;\n            (_b = this.window) === null || _b === void 0 ? void 0 : _b.addEventListener(\"message\", this.onMessage, false);\n        }\n        send(message) {\n            var _a, _b;\n            if (this.origin) {\n                (_b = (_a = this.window) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.postMessage(message, this.origin);\n            }\n        }\n        onMessage(event) {\n            if (!event.data || !isMatched(event.origin, this.origin === \"*\" ? \"\" : this.origin)) {\n                return;\n            }\n            this.process(event.data);\n        }\n    };\n    PostMessage = __decorate([ inversify.injectable(), __metadata(\"design:paramtypes\", []) ], PostMessage);\n    function CmsModule() {\n        return new inversify.ContainerModule(bind => {\n            bind(EventBusService).toDynamicValue(() => new emittery.Typed).inSingletonScope().when(() => typeof window !== \"undefined\");\n            bind(PostMessageService).to(PostMessage).inSingletonScope();\n            bind(RpcClientService).toService(PostMessageService);\n            bind(RpcServerService).toService(PostMessageService);\n            bind(CmsService).to(CmsImpl).inSingletonScope().whenTargetIsDefault();\n            bind(CmsService).to(Cms14Impl).inSingletonScope().whenTargetNamed(\"cms14\");\n        });\n    }\n    /**\n   * Link to a page outside the current application.\n   */    const TYPE_LINK_EXTERNAL = \"external\";\n    /**\n   * Link to a page inside the current application.\n   */    const TYPE_LINK_INTERNAL = \"internal\";\n    /**\n   * Link to a CMS resource.\n   */    const TYPE_LINK_RESOURCE = \"resource\";\n    /**\n   * Unresolved link.\n   */    const TYPE_LINK_UNKNOWN = \"unknown\";\n    /**\n   * Checks whether a value is a link.\n   * @param value The value to check.\n   */    function isLink(value) {\n        return !!value && (Object.prototype.hasOwnProperty.call(value, \"href\") || Object.prototype.hasOwnProperty.call(value, \"type\") && [ TYPE_LINK_EXTERNAL, TYPE_LINK_INTERNAL, TYPE_LINK_RESOURCE, TYPE_LINK_UNKNOWN ].includes(value.type));\n    }\n    class SimpleFactory {\n        constructor() {\n            this.mapping = new Map;\n        }\n        /**\n     * Registers a builder for the specified type.\n     * @param type The entity type.\n     * @param builder The entity builder.\n     */        register(type, builder) {\n            this.mapping.set(type, builder);\n            return this;\n        }\n    }\n    let LinkFactory = class LinkFactory extends SimpleFactory {\n        create(link) {\n            if (isLink(link)) {\n                return this.createLink(link);\n            }\n            return this.createPath(link);\n        }\n        createLink(link) {\n            if (!link.type || typeof link.href === \"undefined\" || !this.mapping.has(link.type)) {\n                return link.href;\n            }\n            const builder = this.mapping.get(link.type);\n            return builder(link.href);\n        }\n        createPath(path) {\n            return this.createLink({\n                href: path,\n                type: TYPE_LINK_INTERNAL\n            });\n        }\n    };\n    LinkFactory = __decorate([ inversify.injectable() ], LinkFactory);\n    const MetaCollectionFactory = Symbol.for(\"MetaCollectionFactory\");\n    const ComponentChildrenToken = Symbol.for(\"ComponentChildrenToken\");\n    const ComponentModelToken = Symbol.for(\"ComponentModelToken\");\n    /**\n   * Generic component type.\n   */    const TYPE_COMPONENT = \"component\";\n    /**\n   * Container item type.\n   */    const TYPE_COMPONENT_CONTAINER_ITEM = \"container-item\";\n    /**\n   * Container type.\n   */    const TYPE_COMPONENT_CONTAINER = \"container\";\n    let ComponentImpl = class ComponentImpl {\n        constructor(model, children, linkFactory, metaFactory) {\n            this.model = model;\n            this.children = children;\n            this.linkFactory = linkFactory;\n            this.meta = metaFactory(this.model.meta);\n        }\n        getId() {\n            return this.model.id;\n        }\n        getMeta() {\n            return this.meta;\n        }\n        getModels() {\n            return this.model.models || {};\n        }\n        getUrl() {\n            return this.linkFactory.create(this.model.links.self);\n        }\n        getName() {\n            return this.model.name || \"\";\n        }\n        getParameters() {\n            return this.model.meta.params || {};\n        }\n        getChildren() {\n            return this.children;\n        }\n        getComponent(...componentNames) {\n            let component = this;\n            while (componentNames.length && component) {\n                const name = componentNames.shift();\n                component = component.getChildren().find(component => component.getName() === name);\n            }\n            return component;\n        }\n        getComponentById(id) {\n            const queue = [ this ];\n            while (queue.length) {\n                const component = queue.shift();\n                if (component.getId() === id) {\n                    return component;\n                }\n                queue.push(...component.getChildren());\n            }\n        }\n    };\n    ComponentImpl = __decorate([ inversify.injectable(), __param(0, inversify.inject(ComponentModelToken)), __param(1, inversify.inject(ComponentChildrenToken)), __param(2, inversify.inject(LinkFactory)), __param(3, inversify.inject(MetaCollectionFactory)), __metadata(\"design:paramtypes\", [ Object, Array, LinkFactory, Function ]) ], ComponentImpl);\n    /**\n   * Checks whether a value is a page component.\n   * @param value The value to check.\n   */    function isComponent(value) {\n        return value instanceof ComponentImpl;\n    }\n    /**\n   * Generic component type.\n   */    const TYPE_COMPONENT$1 = \"COMPONENT\";\n    /**\n   * Container item type.\n   */    const TYPE_COMPONENT_CONTAINER_ITEM$1 = \"CONTAINER_ITEM_COMPONENT\";\n    /**\n   * Container type.\n   */    const TYPE_COMPONENT_CONTAINER$1 = \"CONTAINER_COMPONENT\";\n    let ComponentImpl$1 = class ComponentImpl {\n        constructor(model, children, metaFactory, urlBuilder) {\n            this.model = model;\n            this.children = children;\n            this.urlBuilder = urlBuilder;\n            this.meta = metaFactory(this.model._meta);\n        }\n        getId() {\n            return this.model.id;\n        }\n        getMeta() {\n            return this.meta;\n        }\n        getModels() {\n            return this.model.models || {};\n        }\n        getUrl() {\n            return this.urlBuilder.getApiUrl(this.model._links.componentRendering.href);\n        }\n        getName() {\n            return this.model.name || \"\";\n        }\n        getParameters() {\n            return this.model._meta.params || {};\n        }\n        getChildren() {\n            return this.children;\n        }\n        getComponent(...componentNames) {\n            let component = this;\n            while (componentNames.length && component) {\n                const name = componentNames.shift();\n                component = component.getChildren().find(component => component.getName() === name);\n            }\n            return component;\n        }\n        getComponentById(id) {\n            const queue = [ this ];\n            while (queue.length) {\n                const component = queue.shift();\n                if (component.getId() === id) {\n                    return component;\n                }\n                queue.push(...component.getChildren());\n            }\n        }\n    };\n    ComponentImpl$1 = __decorate([ inversify.injectable(), __param(0, inversify.inject(ComponentModelToken)), __param(1, inversify.inject(ComponentChildrenToken)), __param(2, inversify.inject(MetaCollectionFactory)), __param(3, inversify.inject(UrlBuilderService)), __metadata(\"design:paramtypes\", [ Object, Array, Function, Object ]) ], ComponentImpl$1);\n    /**\n   * Checks whether a value is a page component.\n   * @param value The value to check.\n   */    function isComponent$1(value) {\n        return value instanceof ComponentImpl$1;\n    }\n    /**\n   * A blocked container with blocked items.\n   */    const TYPE_CONTAINER_BOX = \"hst.vbox\";\n    /**\n   * An unordered list container.\n   */    const TYPE_CONTAINER_UNORDERED_LIST = \"hst.unorderedlist\";\n    /**\n   * An ordered list container.\n   */    const TYPE_CONTAINER_ORDERED_LIST = \"hst.orderedlist\";\n    /**\n   * A blocked container with inline items.\n   */    const TYPE_CONTAINER_INLINE = \"hst.span\";\n    /**\n   * A container without surrounding markup.\n   */    const TYPE_CONTAINER_NO_MARKUP = \"hst.nomarkup\";\n    let ContainerImpl = class ContainerImpl extends ComponentImpl {\n        getChildren() {\n            return this.children;\n        }\n        getType() {\n            var _a;\n            return (_a = this.model.xtype) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n        }\n    };\n    ContainerImpl = __decorate([ inversify.injectable() ], ContainerImpl);\n    /**\n   * Checks whether a value is a page container.\n   * @param value The value to check.\n   */    function isContainer(value) {\n        return value instanceof ContainerImpl;\n    }\n    let ContainerImpl$1 = class ContainerImpl extends ComponentImpl$1 {\n        getChildren() {\n            return this.children;\n        }\n        getType() {\n            var _a;\n            return (_a = this.model.xtype) === null || _a === void 0 ? void 0 : _a.toLowerCase();\n        }\n    };\n    ContainerImpl$1 = __decorate([ inversify.injectable() ], ContainerImpl$1);\n    /**\n   * Checks whether a value is a page container.\n   * @param value The value to check.\n   */    function isContainer$1(value) {\n        return value instanceof ContainerImpl$1;\n    }\n    const EventBusService$1 = Symbol(\"EventBusService\");\n    /**\n   * Checks whether a value is a reference.\n   * @param value The value to check.\n   */    function isReference(value) {\n        return !!(value === null || value === void 0 ? void 0 : value.$ref);\n    }\n    function resolve(object, reference) {\n        return reference.$ref.split(\"/\").reduce((value, key) => key ? value === null || value === void 0 ? void 0 : value[key] : object, object);\n    }\n    const PARAMETER_HIDDEN = \"com.onehippo.cms7.targeting.TargetingParameterUtil.hide\";\n    let ContainerItemImpl = class ContainerItemImpl extends(EmitterMixin(ComponentImpl)){\n        constructor(model, linkFactory, metaFactory, eventBus) {\n            super(model, [], linkFactory, metaFactory);\n            this.model = model;\n            this.metaFactory = metaFactory;\n            eventBus === null || eventBus === void 0 ? void 0 : eventBus.on(\"page.update\", this.onPageUpdate.bind(this));\n        }\n        onPageUpdate(event) {\n            const page = event.page;\n            const model = resolve(page, page.root);\n            if ((model === null || model === void 0 ? void 0 : model.id) !== this.getId()) {\n                return;\n            }\n            this.model = model;\n            this.meta = this.metaFactory(model.meta);\n            this.emit(\"update\", {});\n        }\n        getType() {\n            return this.model.label;\n        }\n        isHidden() {\n            var _a;\n            return ((_a = this.model.meta.params) === null || _a === void 0 ? void 0 : _a[PARAMETER_HIDDEN]) === \"on\";\n        }\n        getParameters() {\n            return this.model.meta.paramsInfo || {};\n        }\n    };\n    ContainerItemImpl = __decorate([ inversify.injectable(), __param(0, inversify.inject(ComponentModelToken)), __param(1, inversify.inject(LinkFactory)), __param(2, inversify.inject(MetaCollectionFactory)), __param(3, inversify.inject(EventBusService$1)), __param(3, inversify.optional()), __metadata(\"design:paramtypes\", [ Object, LinkFactory, Function, Object ]) ], ContainerItemImpl);\n    /**\n   * Checks whether a value is a page container item.\n   * @param value The value to check.\n   */    function isContainerItem(value) {\n        return value instanceof ContainerItemImpl;\n    }\n    const PARAMETER_HIDDEN$1 = \"com.onehippo.cms7.targeting.TargetingParameterUtil.hide\";\n    let ContainerItemImpl$1 = class ContainerItemImpl extends(EmitterMixin(ComponentImpl$1)){\n        constructor(model, metaFactory, urlBuilder, eventBus) {\n            super(model, [], metaFactory, urlBuilder);\n            this.model = model;\n            this.metaFactory = metaFactory;\n            eventBus === null || eventBus === void 0 ? void 0 : eventBus.on(\"page.update\", this.onPageUpdate.bind(this));\n        }\n        onPageUpdate(event) {\n            const {page: model} = event.page;\n            if (model.id !== this.getId()) {\n                return;\n            }\n            this.model = model;\n            this.meta = this.metaFactory(model._meta);\n            this.emit(\"update\", {});\n        }\n        getType() {\n            return this.model.label;\n        }\n        isHidden() {\n            var _a;\n            return ((_a = this.model._meta.params) === null || _a === void 0 ? void 0 : _a[PARAMETER_HIDDEN$1]) === \"on\";\n        }\n        getParameters() {\n            return this.model._meta.paramsInfo || {};\n        }\n    };\n    ContainerItemImpl$1 = __decorate([ inversify.injectable(), __param(0, inversify.inject(ComponentModelToken)), __param(1, inversify.inject(MetaCollectionFactory)), __param(2, inversify.inject(UrlBuilderService)), __param(3, inversify.inject(EventBusService$1)), __param(3, inversify.optional()), __metadata(\"design:paramtypes\", [ Object, Function, Object, Object ]) ], ContainerItemImpl$1);\n    /**\n   * Checks whether a value is a page container item.\n   * @param value The value to check.\n   */    function isContainerItem$1(value) {\n        return value instanceof ContainerItemImpl$1;\n    }\n    /**\n   * A component factory producing components based on a type.\n   */    let ComponentFactory = class ComponentFactory extends SimpleFactory {\n        /**\n     * Produces a component based on the page model.\n     * @param page The page model.\n     */\n        create(page) {\n            var _a, _b;\n            const heap = [ page.root ];\n            const pool = new Map;\n            for (let i = 0; i < heap.length; i++) {\n                heap.push(...(_b = (_a = resolve(page, heap[i])) === null || _a === void 0 ? void 0 : _a.children) !== null && _b !== void 0 ? _b : []);\n            }\n            return heap.reverse().reduce((previous, reference) => {\n                var _a, _b;\n                const model = resolve(page, reference);\n                const children = (_b = (_a = model === null || model === void 0 ? void 0 : model.children) === null || _a === void 0 ? void 0 : _a.map(child => pool.get(resolve(page, child)))) !== null && _b !== void 0 ? _b : [];\n                const component = this.buildComponent(model, children);\n                pool.set(model, component);\n                return component;\n            }, undefined);\n        }\n        buildComponent(model, children) {\n            const builder = this.mapping.get(model.type);\n            if (!builder) {\n                throw new Error(`Unsupported component type: '${model.type}'.`);\n            }\n            return builder(model, children);\n        }\n    };\n    ComponentFactory = __decorate([ inversify.injectable() ], ComponentFactory);\n    let ContentFactory = class ContentFactory extends SimpleFactory {\n        create(model) {\n            if (!this.mapping.has(model.type)) {\n                return model;\n            }\n            return this.mapping.get(model.type)(model);\n        }\n    };\n    ContentFactory = __decorate([ inversify.injectable() ], ContentFactory);\n    const DomParserService = Symbol.for(\"DomParserService\");\n    const LinkRewriterService = Symbol.for(\"LinkRewriterService\");\n    const XmlSerializerService = Symbol.for(\"XmlSerializerService\");\n    const BODY_CONTENTS = /^<body.*?>(.*)<\\/body>$/;\n    let LinkRewriterImpl = class LinkRewriterImpl {\n        constructor(linkFactory, domParser, xmlSerializer) {\n            this.linkFactory = linkFactory;\n            this.domParser = domParser;\n            this.xmlSerializer = xmlSerializer;\n        }\n        rewrite(content, type = \"text/html\") {\n            const document = this.domParser.parseFromString(`<body>${content}</body>`, type);\n            this.rewriteAnchors(document);\n            this.rewriteImages(document);\n            const body = this.xmlSerializer.serializeToString(document);\n            return body.replace(BODY_CONTENTS, \"$1\");\n        }\n        rewriteAnchors(document) {\n            Array.from(document.getElementsByTagName(\"a\")).filter(element => element.hasAttribute(\"href\") && element.hasAttribute(\"data-type\")).forEach(element => {\n                var _a;\n                const url = this.linkFactory.create({\n                    href: (_a = element.getAttribute(\"href\")) !== null && _a !== void 0 ? _a : undefined,\n                    type: element.getAttribute(\"data-type\")\n                });\n                if (url) {\n                    element.setAttribute(\"href\", url);\n                }\n            });\n        }\n        rewriteImages(document) {\n            Array.from(document.getElementsByTagName(\"img\")).filter(element => element.hasAttribute(\"src\")).forEach(element => {\n                var _a;\n                const url = this.linkFactory.create({\n                    href: (_a = element.getAttribute(\"src\")) !== null && _a !== void 0 ? _a : undefined,\n                    type: TYPE_LINK_RESOURCE\n                });\n                if (url) {\n                    element.setAttribute(\"src\", url);\n                }\n            });\n        }\n    };\n    LinkRewriterImpl = __decorate([ inversify.injectable(), __param(0, inversify.inject(LinkFactory)), __param(1, inversify.inject(DomParserService)), __param(2, inversify.inject(XmlSerializerService)), __metadata(\"design:paramtypes\", [ LinkFactory, xmldom.DOMParser, xmldom.XMLSerializer ]) ], LinkRewriterImpl);\n    const PageModelToken = Symbol.for(\"PageModelToken\");\n    let PageImpl = class PageImpl {\n        constructor(model, componentFactory, contentFactory, linkFactory, linkRewriter, metaFactory, cmsEventBus, eventBus) {\n            this.model = model;\n            this.contentFactory = contentFactory;\n            this.linkFactory = linkFactory;\n            this.linkRewriter = linkRewriter;\n            this.metaFactory = metaFactory;\n            this.cmsEventBus = cmsEventBus;\n            this.content = new WeakMap;\n            eventBus === null || eventBus === void 0 ? void 0 : eventBus.on(\"page.update\", this.onPageUpdate.bind(this));\n            this.root = componentFactory.create(model);\n        }\n        onPageUpdate(event) {\n            _extends(this.model.page, event.page.page);\n        }\n        getComponent(...componentNames) {\n            var _a;\n            return (_a = this.root) === null || _a === void 0 ? void 0 : _a.getComponent(...componentNames);\n        }\n        getContent(reference) {\n            const model = resolve(this.model, isReference(reference) ? reference : {\n                $ref: `/page/${reference}`\n            });\n            if (!model) {\n                return undefined;\n            }\n            if (!this.content.has(model)) {\n                this.content.set(model, this.contentFactory.create(model));\n            }\n            return this.content.get(model);\n        }\n        getDocument() {\n            return this.model.document && this.getContent(this.model.document);\n        }\n        getMeta(meta) {\n            return this.metaFactory(meta);\n        }\n        getTitle() {\n            var _a, _b;\n            return (_b = (_a = resolve(this.model, this.model.root)) === null || _a === void 0 ? void 0 : _a.meta) === null || _b === void 0 ? void 0 : _b.pageTitle;\n        }\n        getUrl(link) {\n            var _a, _b, _c;\n            if (typeof link === \"undefined\" || isLink(link) || isAbsoluteUrl(link)) {\n                return this.linkFactory.create((_b = (_a = link) !== null && _a !== void 0 ? _a : this.model.links.site) !== null && _b !== void 0 ? _b : \"\");\n            }\n            return resolveUrl(link, (_c = this.linkFactory.create(this.model.links.site)) !== null && _c !== void 0 ? _c : \"\");\n        }\n        getVersion() {\n            return this.model.meta.version;\n        }\n        getVisitor() {\n            return this.model.meta.visitor;\n        }\n        getVisit() {\n            return this.model.meta.visit;\n        }\n        isPreview() {\n            return !!this.model.meta.preview;\n        }\n        rewriteLinks(content, type = \"text/html\") {\n            return this.linkRewriter.rewrite(content, type);\n        }\n        sync() {\n            var _a;\n            (_a = this.cmsEventBus) === null || _a === void 0 ? void 0 : _a.emit(\"page.ready\", {});\n        }\n        toJSON() {\n            return this.model;\n        }\n    };\n    PageImpl = __decorate([ inversify.injectable(), __param(0, inversify.inject(PageModelToken)), __param(1, inversify.inject(ComponentFactory)), __param(2, inversify.inject(ContentFactory)), __param(3, inversify.inject(LinkFactory)), __param(4, inversify.inject(LinkRewriterService)), __param(5, inversify.inject(MetaCollectionFactory)), __param(6, inversify.inject(EventBusService)), __param(6, inversify.optional()), __param(7, inversify.inject(EventBusService$1)), __param(7, inversify.optional()), __metadata(\"design:paramtypes\", [ Object, ComponentFactory, ContentFactory, LinkFactory, Object, Function, Object, Object ]) ], PageImpl);\n    /**\n   * Checks whether a value is a page.\n   * @param value The value to check.\n   */    function isPage(value) {\n        return value instanceof PageImpl;\n    }\n    /**\n   * A component factory producing components based on a type.\n   */    let ComponentFactory$1 = class ComponentFactory extends SimpleFactory {\n        /**\n     * Produces a component based on the model.\n     * @param model The component model.\n     */\n        create(model) {\n            var _a, _b;\n            let component;\n            const queue = [ {\n                model\n            } ];\n            while (queue.length) {\n                const head = queue.shift();\n                if (!head.children && ((_a = head.model.components) === null || _a === void 0 ? void 0 : _a.length)) {\n                    head.children = [];\n                    queue.unshift(...head.model.components.map(model => ({\n                        model,\n                        siblings: head.children\n                    })), head);\n                    continue;\n                }\n                component = this.buildComponent(head.model, (_b = head.children) !== null && _b !== void 0 ? _b : []);\n                if (head.siblings) {\n                    head.siblings.push(component);\n                }\n            }\n            return component;\n        }\n        buildComponent(model, children) {\n            const builder = this.mapping.get(model.type);\n            if (!builder) {\n                throw new Error(`Unsupported component type: '${model.type}'.`);\n            }\n            return builder(model, children);\n        }\n    };\n    ComponentFactory$1 = __decorate([ inversify.injectable() ], ComponentFactory$1);\n    const ContentFactory$1 = Symbol.for(\"ContentFactory\");\n    var PageImpl_1;\n    let PageImpl$1 = PageImpl_1 = class PageImpl {\n        constructor(model, componentFactory, contentFactory, linkFactory, linkRewriter, metaFactory, cmsEventBus, eventBus) {\n            this.model = model;\n            this.contentFactory = contentFactory;\n            this.linkFactory = linkFactory;\n            this.linkRewriter = linkRewriter;\n            this.metaFactory = metaFactory;\n            this.cmsEventBus = cmsEventBus;\n            eventBus === null || eventBus === void 0 ? void 0 : eventBus.on(\"page.update\", this.onPageUpdate.bind(this));\n            this.root = componentFactory.create(model.page);\n            this.content = new Map(Object.entries(model.content || {}).map(([alias, model]) => [ alias, this.contentFactory(model) ]));\n        }\n        onPageUpdate(event) {\n            Object.entries(event.page.content || {}).forEach(([alias, model]) => this.content.set(alias, this.contentFactory(model)));\n        }\n        static getContentReference(reference) {\n            return reference.$ref.split(\"/\", 3)[2] || \"\";\n        }\n        getComponent(...componentNames) {\n            return this.root.getComponent(...componentNames);\n        }\n        getContent(reference) {\n            const contentReference = isReference(reference) ? PageImpl_1.getContentReference(reference) : reference;\n            return this.content.get(contentReference);\n        }\n        getDocument() {\n            throw new Error(\"The page document is not supported by this version of the Page Model API.\");\n        }\n        getMeta(meta) {\n            return this.metaFactory(meta);\n        }\n        getTitle() {\n            return this.model.page._meta.pageTitle;\n        }\n        getUrl(link) {\n            var _a;\n            return this.linkFactory.create((_a = link) !== null && _a !== void 0 ? _a : _extends(_extends({}, this.model._links.site), {\n                type: TYPE_LINK_INTERNAL\n            }));\n        }\n        getVersion() {\n            return this.model._meta.version;\n        }\n        getVisitor() {\n            return this.model._meta.visitor;\n        }\n        getVisit() {\n            return this.model._meta.visit;\n        }\n        isPreview() {\n            return !!this.model._meta.preview;\n        }\n        rewriteLinks(content, type = \"text/html\") {\n            return this.linkRewriter.rewrite(content, type);\n        }\n        sync() {\n            var _a;\n            (_a = this.cmsEventBus) === null || _a === void 0 ? void 0 : _a.emit(\"page.ready\", {});\n        }\n        toJSON() {\n            return this.model;\n        }\n    };\n    PageImpl$1 = PageImpl_1 = __decorate([ inversify.injectable(), __param(0, inversify.inject(PageModelToken)), __param(1, inversify.inject(ComponentFactory$1)), __param(2, inversify.inject(ContentFactory$1)), __param(3, inversify.inject(LinkFactory)), __param(4, inversify.inject(LinkRewriterService)), __param(5, inversify.inject(MetaCollectionFactory)), __param(6, inversify.inject(EventBusService)), __param(6, inversify.optional()), __param(7, inversify.inject(EventBusService$1)), __param(7, inversify.optional()), __metadata(\"design:paramtypes\", [ Object, ComponentFactory$1, Function, LinkFactory, Object, Function, Object, Object ]) ], PageImpl$1);\n    /**\n   * Checks whether a value is a page.\n   * @param value The value to check.\n   */    function isPage$1(value) {\n        return value instanceof PageImpl$1;\n    }\n    const ContentModelToken = Symbol.for(\"ContentModelToken\");\n    let ContentImpl = class ContentImpl {\n        constructor(model, linkFactory, metaFactory) {\n            var _a;\n            this.model = model;\n            this.linkFactory = linkFactory;\n            this.meta = metaFactory((_a = this.model._meta) !== null && _a !== void 0 ? _a : {});\n        }\n        getId() {\n            return this.model.id;\n        }\n        getLocale() {\n            return this.model.localeString;\n        }\n        getMeta() {\n            return this.meta;\n        }\n        getName() {\n            return this.model.name;\n        }\n        getData() {\n            return this.model;\n        }\n        getUrl() {\n            return this.linkFactory.create(this.model._links.site);\n        }\n    };\n    ContentImpl = __decorate([ inversify.injectable(), __param(0, inversify.inject(ContentModelToken)), __param(1, inversify.inject(LinkFactory)), __param(2, inversify.inject(MetaCollectionFactory)), __metadata(\"design:paramtypes\", [ Object, LinkFactory, Function ]) ], ContentImpl);\n    /**\n   * Checks whether a value is a content.\n   * @param value The value to check.\n   */    function isContent(value) {\n        return value instanceof ContentImpl;\n    }\n    const DocumentModelToken = Symbol.for(\"DocumentModelToken\");\n    const TYPE_DOCUMENT = \"document\";\n    let DocumentImpl = class DocumentImpl {\n        constructor(model, linkFactory, metaFactory) {\n            var _a;\n            this.model = model;\n            this.linkFactory = linkFactory;\n            this.meta = metaFactory((_a = this.model.meta) !== null && _a !== void 0 ? _a : {});\n        }\n        getId() {\n            return this.model.data.id;\n        }\n        getLocale() {\n            return this.model.data.localeString;\n        }\n        getMeta() {\n            return this.meta;\n        }\n        getName() {\n            return this.model.data.name;\n        }\n        getData() {\n            return this.model.data;\n        }\n        getUrl() {\n            return this.linkFactory.create(this.model.links.site);\n        }\n    };\n    DocumentImpl = __decorate([ inversify.injectable(), __param(0, inversify.inject(DocumentModelToken)), __param(1, inversify.inject(LinkFactory)), __param(2, inversify.inject(MetaCollectionFactory)), __metadata(\"design:paramtypes\", [ Object, LinkFactory, Function ]) ], DocumentImpl);\n    /**\n   * Checks whether a value is a document.\n   * @param value The value to check.\n   */    function isDocument(value) {\n        return value instanceof DocumentImpl;\n    }\n    const ImageFactory = Symbol.for(\"ImageFactory\");\n    const ImageModelToken = Symbol.for(\"ImageModelToken\");\n    let ImageImpl = class ImageImpl {\n        constructor(model, linkFactory) {\n            this.model = model;\n            this.linkFactory = linkFactory;\n        }\n        getDisplayName() {\n            return this.model.displayName;\n        }\n        getFileName() {\n            var _a;\n            return (_a = this.model.fileName) !== null && _a !== void 0 ? _a : undefined;\n        }\n        getHeight() {\n            return this.model.height;\n        }\n        getMimeType() {\n            return this.model.mimeType;\n        }\n        getName() {\n            return this.model.name;\n        }\n        getSize() {\n            return this.model.size;\n        }\n        getUrl() {\n            return this.model.links.site && this.linkFactory.create(this.model.links.site);\n        }\n        getWidth() {\n            return this.model.width;\n        }\n    };\n    ImageImpl = __decorate([ inversify.injectable(), __param(0, inversify.inject(ImageModelToken)), __param(1, inversify.inject(LinkFactory)), __metadata(\"design:paramtypes\", [ Object, LinkFactory ]) ], ImageImpl);\n    const ImageSetModelToken = Symbol.for(\"ImageSetModelToken\");\n    const TYPE_IMAGE_SET = \"imageset\";\n    let ImageSetImpl = class ImageSetImpl {\n        constructor(model, imageFactory) {\n            this.model = model;\n            this.original = model.data.original ? imageFactory(model.data.original) : undefined;\n            this.thumbnail = model.data.thumbnail ? imageFactory(model.data.thumbnail) : undefined;\n        }\n        getDescription() {\n            var _a;\n            return (_a = this.model.data.description) !== null && _a !== void 0 ? _a : undefined;\n        }\n        getDisplayName() {\n            return this.model.data.displayName;\n        }\n        getFileName() {\n            var _a;\n            return (_a = this.model.data.fileName) !== null && _a !== void 0 ? _a : undefined;\n        }\n        getId() {\n            return this.model.data.id;\n        }\n        getLocale() {\n            var _a;\n            return (_a = this.model.data.localeString) !== null && _a !== void 0 ? _a : undefined;\n        }\n        getName() {\n            return this.model.data.name;\n        }\n        getOriginal() {\n            return this.original;\n        }\n        getThumbnail() {\n            return this.thumbnail;\n        }\n    };\n    ImageSetImpl = __decorate([ inversify.injectable(), __param(0, inversify.inject(ImageSetModelToken)), __param(1, inversify.inject(ImageFactory)), __metadata(\"design:paramtypes\", [ Object, Function ]) ], ImageSetImpl);\n    /**\n   * Checks whether a value is an image set.\n   * @param value The value to check.\n   */    function isImageSet(value) {\n        return value instanceof ImageSetImpl;\n    }\n    const MenuItemFactory = Symbol.for(\"MenuItemFactory\");\n    const MenuItemModelToken = Symbol.for(\"MenuItemModelToken\");\n    let MenuItemImpl = class MenuItemImpl {\n        constructor(model, linkFactory, menuItemFactory) {\n            this.model = model;\n            this.linkFactory = linkFactory;\n            this.children = model.childMenuItems.map(menuItemFactory);\n        }\n        getChildren() {\n            return this.children;\n        }\n        getDepth() {\n            return this.model.depth;\n        }\n        getLink() {\n            return this.model.links.site;\n        }\n        getName() {\n            return this.model.name;\n        }\n        getParameters() {\n            return this.model.parameters;\n        }\n        getUrl() {\n            return this.model.links.site && this.linkFactory.create(this.model.links.site);\n        }\n        isExpanded() {\n            return this.model.expanded;\n        }\n        isRepositoryBased() {\n            return this.model.repositoryBased;\n        }\n        isSelected() {\n            return this.model.selected;\n        }\n    };\n    MenuItemImpl = __decorate([ inversify.injectable(), __param(0, inversify.inject(MenuItemModelToken)), __param(1, inversify.inject(LinkFactory)), __param(2, inversify.inject(MenuItemFactory)), __metadata(\"design:paramtypes\", [ Object, LinkFactory, Function ]) ], MenuItemImpl);\n    const MenuModelToken = Symbol.for(\"MenuModelToken\");\n    const TYPE_MENU = \"menu\";\n    let MenuImpl = class MenuImpl {\n        constructor(model, metaFactory, menuItemFactory) {\n            this.model = model;\n            this.items = model.data.siteMenuItems.map(menuItemFactory);\n            this.meta = metaFactory(model.meta);\n            this.selected = model.data.selectSiteMenuItem ? menuItemFactory(model.data.selectSiteMenuItem) : undefined;\n        }\n        getItems() {\n            return this.items;\n        }\n        getMeta() {\n            return this.meta;\n        }\n        getName() {\n            return this.model.data.name;\n        }\n        getSelected() {\n            return this.selected;\n        }\n    };\n    MenuImpl = __decorate([ inversify.injectable(), __param(0, inversify.inject(MenuModelToken)), __param(1, inversify.inject(MetaCollectionFactory)), __param(2, inversify.inject(MenuItemFactory)), __metadata(\"design:paramtypes\", [ Object, Function, Function ]) ], MenuImpl);\n    /**\n   * Checks whether a value is a menu.\n   * @param value The value to check.\n   */    function isMenu(value) {\n        return value instanceof MenuImpl;\n    }\n    const TYPE_META_COMMENT = \"comment\";\n    /**\n   * Meta-data following before a page component.\n   */    const META_POSITION_BEGIN = \"begin\";\n    /**\n   * Meta-data following after a page component.\n   */    const META_POSITION_END = \"end\";\n    class MetaImpl {\n        constructor(model, position) {\n            this.model = model;\n            this.position = position;\n        }\n        getData() {\n            return this.model.data;\n        }\n        getPosition() {\n            return this.position;\n        }\n    }\n    /**\n   * Checks whether a value is a meta-data object.\n   * @param value The value to check.\n   */    function isMeta(value) {\n        return value instanceof MetaImpl;\n    }\n    const HTML_COMMENT = /^<!--(.*)-->$/;\n    /**\n   * Meta information stored in HST-comments.\n   */    class MetaCommentImpl extends MetaImpl {\n        getData() {\n            const data = super.getData();\n            const [, payload = data] = data.match(HTML_COMMENT) || [];\n            return payload;\n        }\n    }\n    /**\n   * Checks whether a value is a meta-data comment.\n   * @param value The value to check.\n   */    function isMetaComment(value) {\n        return value instanceof MetaCommentImpl;\n    }\n    const PageFactory = Symbol.for(\"PageFactory\");\n    /**\n   * The factory to produce meta-data collection from the page model meta-data.\n   */    let MetaFactory = class MetaFactory extends SimpleFactory {\n        create(meta, position) {\n            const builder = this.mapping.get(meta.type);\n            if (!builder) {\n                throw new Error(`Unsupported meta type: '${meta.type}'.`);\n            }\n            return builder(meta, position);\n        }\n    };\n    MetaFactory = __decorate([ inversify.injectable() ], MetaFactory);\n    var MetaCollectionImpl_1;\n    const MetaCollectionModelToken = Symbol.for(\"MetaCollectionModelToken\");\n    let MetaCollectionImpl = MetaCollectionImpl_1 = class MetaCollectionImpl extends Array {\n        constructor(model, metaFactory) {\n            super(...(model.beginNodeSpan || []).map(model => metaFactory.create(model, META_POSITION_BEGIN)), ...(model.endNodeSpan || []).map(model => metaFactory.create(model, META_POSITION_END)));\n            this.comments = [];\n            const prototype = Object.create(MetaCollectionImpl_1.prototype);\n            prototype.constructor = Array.prototype.constructor;\n            Object.setPrototypeOf(this, prototype);\n            Object.freeze(this);\n        }\n        clear() {\n            this.comments.splice(0).forEach(comment => comment.remove());\n        }\n        render(head, tail) {\n            var _a;\n            const document = (_a = head.ownerDocument) !== null && _a !== void 0 ? _a : tail.ownerDocument;\n            if (!document) {\n                return;\n            }\n            this.comments.push(...this.filter(isMetaComment).filter(meta => meta.getPosition() === META_POSITION_BEGIN).map(meta => document.createComment(meta.getData())).map(comment => {\n                var _a;\n                (_a = head.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(comment, head);\n                return comment;\n            }), ...this.filter(isMetaComment).filter(meta => meta.getPosition() === META_POSITION_END).reverse().map(meta => document.createComment(meta.getData())).map(comment => {\n                var _a, _b;\n                if (tail.nextSibling) {\n                    (_a = tail.parentNode) === null || _a === void 0 ? void 0 : _a.insertBefore(comment, tail.nextSibling);\n                } else {\n                    (_b = tail.parentNode) === null || _b === void 0 ? void 0 : _b.appendChild(comment);\n                }\n                return comment;\n            }));\n        }\n    };\n    MetaCollectionImpl = MetaCollectionImpl_1 = __decorate([ inversify.injectable(), __param(0, inversify.inject(MetaCollectionModelToken)), __param(1, inversify.inject(MetaFactory)), __metadata(\"design:paramtypes\", [ Object, MetaFactory ]) ], MetaCollectionImpl);\n    function PageModule() {\n        return new inversify.ContainerModule(bind => {\n            bind(EventBusService$1).toDynamicValue(() => new emittery.Typed).inSingletonScope().when(() => typeof window !== \"undefined\");\n            bind(LinkRewriterService).to(LinkRewriterImpl).inSingletonScope();\n            bind(DomParserService).toConstantValue(new xmldom.DOMParser);\n            bind(XmlSerializerService).toConstantValue(new xmldom.XMLSerializer);\n            bind(LinkFactory).toSelf().inSingletonScope().onActivation(({container}, factory) => {\n                const url = container.get(UrlBuilderService);\n                return factory.register(TYPE_LINK_INTERNAL, url.getSpaUrl.bind(url));\n            });\n            bind(MetaCollectionFactory).toFactory(({container}) => model => {\n                const scope = container.createChild();\n                scope.bind(MetaCollectionImpl).toSelf();\n                scope.bind(MetaCollectionModelToken).toConstantValue(model);\n                return scope.get(MetaCollectionImpl);\n            });\n            bind(MetaFactory).toSelf().inSingletonScope().onActivation((context, factory) => factory.register(TYPE_META_COMMENT, (model, position) => new MetaCommentImpl(model, position)));\n            bind(MenuItemFactory).toFactory(({container}) => model => {\n                const scope = container.createChild();\n                scope.bind(MenuItemImpl).toSelf();\n                scope.bind(MenuItemModelToken).toConstantValue(model);\n                return scope.get(MenuItemImpl);\n            });\n            bind(ImageFactory).toFactory(({container}) => model => {\n                const scope = container.createChild();\n                scope.bind(ImageImpl).toSelf();\n                scope.bind(ImageModelToken).toConstantValue(model);\n                return scope.get(ImageImpl);\n            });\n            bind(ContentFactory).toSelf().inSingletonScope().onActivation(({container}, factory) => factory.register(TYPE_DOCUMENT, model => {\n                const scope = container.createChild();\n                scope.bind(DocumentImpl).toSelf();\n                scope.bind(DocumentModelToken).toConstantValue(model);\n                return scope.get(DocumentImpl);\n            }).register(TYPE_IMAGE_SET, model => {\n                const scope = container.createChild();\n                scope.bind(ImageSetImpl).toSelf();\n                scope.bind(ImageSetModelToken).toConstantValue(model);\n                return scope.get(ImageSetImpl);\n            }).register(TYPE_MENU, model => {\n                const scope = container.createChild();\n                scope.bind(MenuImpl).toSelf();\n                scope.bind(MenuModelToken).toConstantValue(model);\n                return scope.get(MenuImpl);\n            }));\n            bind(ComponentFactory).toSelf().inSingletonScope().onActivation(({container}, factory) => factory.register(TYPE_COMPONENT, (model, children) => {\n                const scope = container.createChild();\n                scope.bind(ComponentImpl).toSelf();\n                scope.bind(ComponentModelToken).toConstantValue(model);\n                scope.bind(ComponentChildrenToken).toConstantValue(children);\n                return scope.get(ComponentImpl);\n            }).register(TYPE_COMPONENT_CONTAINER, (model, children) => {\n                const scope = container.createChild();\n                scope.bind(ContainerImpl).toSelf();\n                scope.bind(ComponentModelToken).toConstantValue(model);\n                scope.bind(ComponentChildrenToken).toConstantValue(children);\n                return scope.get(ContainerImpl);\n            }).register(TYPE_COMPONENT_CONTAINER_ITEM, model => {\n                const scope = container.createChild();\n                scope.bind(ContainerItemImpl).toSelf();\n                scope.bind(ComponentModelToken).toConstantValue(model);\n                return scope.get(ContainerItemImpl);\n            }));\n            bind(PageFactory).toFactory(({container}) => model => {\n                const scope = container.createChild();\n                scope.bind(PageImpl).toSelf();\n                scope.bind(PageModelToken).toConstantValue(model);\n                return scope.get(PageImpl);\n            });\n        });\n    }\n    function PageModule$1() {\n        return new inversify.ContainerModule(bind => {\n            bind(EventBusService$1).toDynamicValue(() => new emittery.Typed).inSingletonScope().when(() => typeof window !== \"undefined\");\n            bind(LinkRewriterService).to(LinkRewriterImpl).inSingletonScope();\n            bind(DomParserService).toConstantValue(new xmldom.DOMParser);\n            bind(XmlSerializerService).toConstantValue(new xmldom.XMLSerializer);\n            bind(LinkFactory).toSelf().inSingletonScope().onActivation(({container}, factory) => {\n                const url = container.get(UrlBuilderService);\n                return factory.register(TYPE_LINK_INTERNAL, url.getSpaUrl.bind(url));\n            });\n            bind(MetaCollectionFactory).toFactory(({container}) => model => {\n                const scope = container.createChild();\n                scope.bind(MetaCollectionImpl).toSelf();\n                scope.bind(MetaCollectionModelToken).toConstantValue(model);\n                return scope.get(MetaCollectionImpl);\n            });\n            bind(MetaFactory).toSelf().inSingletonScope().onActivation((context, factory) => factory.register(TYPE_META_COMMENT, (model, position) => new MetaCommentImpl(model, position)));\n            bind(ContentFactory$1).toFactory(({container}) => model => {\n                const scope = container.createChild();\n                scope.bind(ContentImpl).toSelf();\n                scope.bind(ContentModelToken).toConstantValue(model);\n                return scope.get(ContentImpl);\n            });\n            bind(ComponentFactory$1).toSelf().inSingletonScope().onActivation(({container}, factory) => factory.register(TYPE_COMPONENT$1, (model, children) => {\n                const scope = container.createChild();\n                scope.bind(ComponentImpl$1).toSelf();\n                scope.bind(ComponentModelToken).toConstantValue(model);\n                scope.bind(ComponentChildrenToken).toConstantValue(children);\n                return scope.get(ComponentImpl$1);\n            }).register(TYPE_COMPONENT_CONTAINER$1, (model, children) => {\n                const scope = container.createChild();\n                scope.bind(ContainerImpl$1).toSelf();\n                scope.bind(ComponentModelToken).toConstantValue(model);\n                scope.bind(ComponentChildrenToken).toConstantValue(children);\n                return scope.get(ContainerImpl$1);\n            }).register(TYPE_COMPONENT_CONTAINER_ITEM$1, model => {\n                const scope = container.createChild();\n                scope.bind(ContainerItemImpl$1).toSelf();\n                scope.bind(ComponentModelToken).toConstantValue(model);\n                return scope.get(ContainerItemImpl$1);\n            }));\n            bind(PageFactory).toFactory(({container}) => model => {\n                const scope = container.createChild();\n                scope.bind(PageImpl$1).toSelf();\n                scope.bind(PageModelToken).toConstantValue(model);\n                return scope.get(PageImpl$1);\n            });\n        });\n    }\n    /**\n   * Checks whether a value is a page component.\n   * @param value The value to check.\n   */    function isComponent$2(value) {\n        return isComponent(value) || isComponent$1(value);\n    }\n    /**\n   * Checks whether a value is a page container.\n   * @param value The value to check.\n   */    function isContainer$2(value) {\n        return isContainer(value) || isContainer$1(value);\n    }\n    /**\n   * Checks whether a value is a page container item.\n   * @param value The value to check.\n   */    function isContainerItem$2(value) {\n        return isContainerItem(value) || isContainerItem$1(value);\n    }\n    /**\n   * Checks whether a value is a page.\n   * @param value The value to check.\n   */    function isPage$2(value) {\n        return isPage(value) || isPage$1(value);\n    }\n    const SpaService = Symbol.for(\"SpaService\");\n    /**\n   * SPA entry point interacting with the Channel Manager and the Page Model API.\n   */    let Spa = class Spa {\n        /**\n     * @param eventBus Event bus to exchange data between submodules.\n     * @param api Api client.\n     * @param pageFactory Factory to produce page instances.\n     */\n        constructor(api, pageFactory, cmsEventBus, eventBus) {\n            this.api = api;\n            this.pageFactory = pageFactory;\n            this.cmsEventBus = cmsEventBus;\n            this.eventBus = eventBus;\n            this.onCmsUpdate = this.onCmsUpdate.bind(this);\n        }\n        onCmsUpdate(event) {\n            var _a;\n            return __awaiter(this, void 0, void 0, (function*() {\n                const root = this.page.getComponent();\n                const component = root.getComponentById(event.id);\n                const url = component === null || component === void 0 ? void 0 : component.getUrl();\n                if (!url) {\n                    return;\n                }\n                const model = yield this.api.getComponent(url, event.properties);\n                (_a = this.eventBus) === null || _a === void 0 ? void 0 : _a.emit(\"page.update\", {\n                    page: model\n                });\n            }));\n        }\n        /**\n     * Initializes the SPA.\n     * @param model A preloaded page model or URL to a page model.\n     */        initialize(model) {\n            if (typeof model === \"string\") {\n                return this.api.getPage(model).then(this.hydrate.bind(this));\n            }\n            return this.hydrate(model);\n        }\n        hydrate(model) {\n            var _a;\n            this.page = this.pageFactory(model);\n            if (this.page.isPreview()) {\n                (_a = this.cmsEventBus) === null || _a === void 0 ? void 0 : _a.on(\"cms.update\", this.onCmsUpdate);\n            }\n            return this.page;\n        }\n        /**\n     * Destroys the integration with the SPA page.\n     */        destroy() {\n            var _a, _b;\n            (_a = this.cmsEventBus) === null || _a === void 0 ? void 0 : _a.off(\"cms.update\", this.onCmsUpdate);\n            (_b = this.eventBus) === null || _b === void 0 ? void 0 : _b.clearListeners();\n            delete this.page;\n        }\n    };\n    Spa = __decorate([ inversify.injectable(), __param(0, inversify.inject(ApiService)), __param(1, inversify.inject(PageFactory)), __param(2, inversify.inject(EventBusService)), __param(2, inversify.optional()), __param(3, inversify.inject(EventBusService$1)), __param(3, inversify.optional()), __metadata(\"design:paramtypes\", [ Object, Function, Object, Object ]) ], Spa);\n    function SpaModule() {\n        return new inversify.ContainerModule(bind => {\n            bind(ApiService).to(ApiImpl).inSingletonScope();\n            bind(SpaService).to(Spa).inSingletonScope();\n        });\n    }\n    function isConfigurationWithProxy(value) {\n        var _a, _b;\n        return !!(((_a = value === null || value === void 0 ? void 0 : value.options) === null || _a === void 0 ? void 0 : _a.live) && ((_b = value === null || value === void 0 ? void 0 : value.options) === null || _b === void 0 ? void 0 : _b.preview));\n    }\n    function isConfigurationWithJwt09(value) {\n        return !!(value === null || value === void 0 ? void 0 : value.cmsBaseUrl);\n    }\n    const DEFAULT_AUTHORIZATION_PARAMETER = \"token\";\n    const DEFAULT_SERVER_ID_PARAMETER = \"server-id\";\n    const container = new inversify.Container({\n        skipBaseClassChecks: true\n    });\n    const pages = new WeakMap;\n    container.load(CmsModule(), UrlModule());\n    function onReady(value, callback) {\n        const wrapper = result => (callback(result), result);\n        return value instanceof Promise ? value.then(wrapper) : wrapper(value);\n    }\n    function initializeWithProxy(scope, configuration, model) {\n        const options = isMatched(configuration.request.path, configuration.options.preview.spaBaseUrl) ? configuration.options.preview : configuration.options.live;\n        scope.load(PageModule$1(), SpaModule(), UrlModule$1());\n        scope.bind(ApiOptionsToken).toConstantValue(configuration);\n        scope.bind(UrlBuilderOptionsToken).toConstantValue(options);\n        scope.getNamed(CmsService, \"cms14\").initialize(configuration);\n        return onReady(scope.get(SpaService).initialize(model !== null && model !== void 0 ? model : configuration.request.path), () => {\n            scope.unbind(ApiOptionsToken);\n            scope.unbind(UrlBuilderOptionsToken);\n        });\n    }\n    function initializeWithJwt09(scope, configuration, model) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const authorizationParameter = (_a = configuration.authorizationQueryParameter) !== null && _a !== void 0 ? _a : DEFAULT_AUTHORIZATION_PARAMETER;\n        const serverIdParameter = (_b = configuration.serverIdQueryParameter) !== null && _b !== void 0 ? _b : DEFAULT_SERVER_ID_PARAMETER;\n        const {url: path, searchParams} = extractSearchParams(configuration.request.path, [ authorizationParameter, serverIdParameter ].filter(Boolean));\n        const authorizationToken = (_c = searchParams.get(authorizationParameter)) !== null && _c !== void 0 ? _c : undefined;\n        const serverId = (_d = searchParams.get(serverIdParameter)) !== null && _d !== void 0 ? _d : undefined;\n        const config = _extends(_extends({}, configuration), {\n            origin: (_e = configuration.origin) !== null && _e !== void 0 ? _e : parseUrl((_g = (_f = configuration.apiBaseUrl) !== null && _f !== void 0 ? _f : configuration.cmsBaseUrl) !== null && _g !== void 0 ? _g : \"\").origin,\n            spaBaseUrl: appendSearchParams((_h = configuration.spaBaseUrl) !== null && _h !== void 0 ? _h : \"\", searchParams)\n        });\n        scope.load(PageModule$1(), SpaModule(), UrlModule$1());\n        scope.bind(ApiOptionsToken).toConstantValue(_extends({\n            authorizationToken,\n            serverId\n        }, config));\n        scope.bind(UrlBuilderOptionsToken).toConstantValue(config);\n        return onReady(scope.get(SpaService).initialize(model !== null && model !== void 0 ? model : path), page => {\n            if (page.isPreview() && config.cmsBaseUrl) {\n                scope.get(PostMessageService).initialize(config);\n                scope.get(CmsService).initialize(config);\n            }\n            scope.unbind(ApiOptionsToken);\n            scope.unbind(UrlBuilderOptionsToken);\n        });\n    }\n    function initializeWithJwt10(scope, configuration, model) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n        const authorizationParameter = (_a = configuration.authorizationQueryParameter) !== null && _a !== void 0 ? _a : DEFAULT_AUTHORIZATION_PARAMETER;\n        const endpointParameter = (_b = configuration.endpointQueryParameter) !== null && _b !== void 0 ? _b : \"\";\n        const serverIdParameter = (_c = configuration.serverIdQueryParameter) !== null && _c !== void 0 ? _c : DEFAULT_SERVER_ID_PARAMETER;\n        const {url: path, searchParams} = extractSearchParams(configuration.request.path, [ authorizationParameter, serverIdParameter, endpointParameter ].filter(Boolean));\n        const authorizationToken = (_d = searchParams.get(authorizationParameter)) !== null && _d !== void 0 ? _d : undefined;\n        const endpoint = (_e = searchParams.get(endpointParameter)) !== null && _e !== void 0 ? _e : undefined;\n        const serverId = (_f = searchParams.get(serverIdParameter)) !== null && _f !== void 0 ? _f : undefined;\n        const config = _extends(_extends({}, configuration), {\n            apiVersion: \"1.0\",\n            endpoint: (_g = configuration.endpoint) !== null && _g !== void 0 ? _g : endpoint,\n            baseUrl: appendSearchParams((_h = configuration.baseUrl) !== null && _h !== void 0 ? _h : \"\", searchParams),\n            origin: (_j = configuration.origin) !== null && _j !== void 0 ? _j : parseUrl((_l = (_k = configuration.endpoint) !== null && _k !== void 0 ? _k : endpoint) !== null && _l !== void 0 ? _l : \"\").origin\n        });\n        scope.load(PageModule(), SpaModule(), UrlModule());\n        scope.bind(ApiOptionsToken).toConstantValue(_extends({\n            authorizationToken,\n            serverId\n        }, config));\n        scope.bind(UrlBuilderOptionsToken).toConstantValue(config);\n        return onReady(scope.get(SpaService).initialize(model !== null && model !== void 0 ? model : path), page => {\n            if (page.isPreview() && config.endpoint) {\n                scope.get(PostMessageService).initialize(config);\n                scope.get(CmsService).initialize(config);\n            }\n            scope.unbind(ApiOptionsToken);\n            scope.unbind(UrlBuilderOptionsToken);\n        });\n    }\n    function initialize(configuration, model) {\n        if (isPage$2(model)) {\n            return model;\n        }\n        const scope = container.createChild();\n        return onReady(isConfigurationWithProxy(configuration) ? initializeWithProxy(scope, configuration, model) : isConfigurationWithJwt09(configuration) ? initializeWithJwt09(scope, configuration, model) : initializeWithJwt10(scope, configuration, model), page => pages.set(page, scope));\n    }\n    /**\n   * Destroys the integration with the SPA page.\n   * @param page Page instance to destroy.\n   */    function destroy(page) {\n        const scope = pages.get(page);\n        pages.delete(page);\n        return scope === null || scope === void 0 ? void 0 : scope.get(SpaService).destroy();\n    }\n    exports.META_POSITION_BEGIN = META_POSITION_BEGIN;\n    exports.META_POSITION_END = META_POSITION_END;\n    exports.TYPE_CONTAINER_BOX = TYPE_CONTAINER_BOX;\n    exports.TYPE_CONTAINER_INLINE = TYPE_CONTAINER_INLINE;\n    exports.TYPE_CONTAINER_NO_MARKUP = TYPE_CONTAINER_NO_MARKUP;\n    exports.TYPE_CONTAINER_ORDERED_LIST = TYPE_CONTAINER_ORDERED_LIST;\n    exports.TYPE_CONTAINER_UNORDERED_LIST = TYPE_CONTAINER_UNORDERED_LIST;\n    exports.TYPE_LINK_EXTERNAL = TYPE_LINK_EXTERNAL;\n    exports.TYPE_LINK_INTERNAL = TYPE_LINK_INTERNAL;\n    exports.TYPE_LINK_RESOURCE = TYPE_LINK_RESOURCE;\n    exports.destroy = destroy;\n    exports.initialize = initialize;\n    exports.isComponent = isComponent$2;\n    exports.isContainer = isContainer$2;\n    exports.isContainerItem = isContainerItem$2;\n    exports.isContent = isContent;\n    exports.isDocument = isDocument;\n    exports.isImageSet = isImageSet;\n    exports.isLink = isLink;\n    exports.isMenu = isMenu;\n    exports.isMeta = isMeta;\n    exports.isMetaComment = isMetaComment;\n    exports.isPage = isPage$2;\n    exports.isReference = isReference;\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n}));\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"script"}